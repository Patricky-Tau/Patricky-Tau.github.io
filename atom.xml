<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pi</title>
  <icon>https://tau.gay/icon.jpeg</icon>
  <subtitle>patricky@patricky-tau</subtitle>
  <link href="https://tau.gay/atom.xml" rel="self"/>
  
  <link href="https://tau.gay/"/>
  <updated>2022-09-07T12:50:35.337Z</updated>
  <id>https://tau.gay/</id>
  
  <author>
    <name>Patricky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客站遇到的若干问题与解决</title>
    <link href="https://tau.gay/etc/bugs/"/>
    <id>https://tau.gay/etc/bugs/</id>
    <published>2022-09-07T12:39:05.000Z</published>
    <updated>2022-09-07T12:50:35.337Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录了派派遇到的各种问题。</p><span id="more"></span><h2 id="公式">公式</h2><h3 id="颜色块渲染失败">颜色块渲染失败</h3><p><a href="/cf/1717/e">文章连接</a></p><h4 id="效果">效果</h4><p><span class="math display">\[\begin{aligned}ans &amp;= \sum_{k=1}^{n} \sum_{a=1}^{\lfloor n / k \rfloor}\sum_{b=1}^{\lfloor n / k \rfloor}\colorbox{ADD8E6}{\boxed{\operatorname{lcm}(n-ak-bk,k)}} [\gcd(a,b)=1][ak+bk \le n] \\&amp;= \sum_{k=1}^{n} \sum_{a=1}^{\lfloor n / k \rfloor}\sum_{b=1}^{\lfloor n / k \rfloor}\colorbox{ADD8E6}{\boxed{\dfrac{k(n-ak-bk)}{\gcd(k,n)}}}\colorbox{FFF000}{\boxed{[\gcd(a,b)=1]}} [ak+bk \le n] \\&amp;= \sum_{k=1}^{n} \dfrac{k}{\gcd(k,n)} \sum_{a=1}^{\lfloor n / k\rfloor} \sum_{b=1}^{\lfloor n / k \rfloor} (n - ak - bk)[ak+bk \le n]\colorbox{FFF000}{\boxed{\sum_{d | \gcd(a, b)} \mu(d)}} \\&amp;= \sum_{k=1}^{n} \dfrac{k}{\gcd(k,n)} \sum_{d=1}^{\lfloor n / k\rfloor} \mu(d) \sum_{a=1}^{\lfloor n / kd \rfloor} \sum_{b=1}^{\lfloorn / kd \rfloor - a} n - akd - bkd \\&amp;= \sum_{k=1}^{n} \dfrac{k}{\gcd(k,n)} \sum_{d=1}^{\lfloor{n /k}\rfloor}\mu(d)\left(\dfrac{n \lfloor n / kd\rfloor (\lfloor n / kd\rfloor - 1)}{2}+\dfrac{k d \lfloor n / kd \rfloor (1 - {\lfloor n / kd\rfloor}^{2})}{3}\right) \\&amp;= \sum_{k=1}^{n} \dfrac{k}{\gcd(k,n)}\sum_{d=1}^{b}\mu(d)\left(\dfrac{nt(t - 1)}{2}+\dfrac{k d t (1 -t^2)}{3}\right)\end{aligned}\]</span></p><figure class="highlight latex"><figcaption><span>未渲染的公式 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;aligned&#125; </span><br><span class="line">ans <span class="built_in">&amp;</span>= <span class="keyword">\sum</span><span class="built_in">_</span>&#123;k=1&#125;<span class="built_in">^</span>&#123;n&#125; <span class="keyword">\sum</span><span class="built_in">_</span>&#123;a=1&#125;<span class="built_in">^</span>&#123;<span class="keyword">\lfloor</span> n / k <span class="keyword">\rfloor</span>&#125; <span class="keyword">\sum</span><span class="built_in">_</span>&#123;b=1&#125;<span class="built_in">^</span>&#123;<span class="keyword">\lfloor</span> n / k <span class="keyword">\rfloor</span>&#125; <span class="keyword">\colorbox</span>&#123;<span class="params">#</span>ADD8E6&#125;&#123;<span class="keyword">\boxed</span>&#123;<span class="keyword">\operatorname</span>&#123;lcm&#125;(n-ak-bk,k)&#125;&#125; [<span class="keyword">\gcd</span>(a,b)=1] [ak+bk <span class="keyword">\le</span> n] <span class="keyword">\\</span></span><br><span class="line"><span class="built_in">&amp;</span>= <span class="keyword">\sum</span><span class="built_in">_</span>&#123;k=1&#125;<span class="built_in">^</span>&#123;n&#125; <span class="keyword">\sum</span><span class="built_in">_</span>&#123;a=1&#125;<span class="built_in">^</span>&#123;<span class="keyword">\lfloor</span> n / k <span class="keyword">\rfloor</span>&#125; <span class="keyword">\sum</span><span class="built_in">_</span>&#123;b=1&#125;<span class="built_in">^</span>&#123;<span class="keyword">\lfloor</span> n / k <span class="keyword">\rfloor</span>&#125; <span class="keyword">\colorbox</span>&#123;<span class="params">#</span>ADD8E6&#125;&#123;<span class="keyword">\boxed</span>&#123;<span class="keyword">\dfrac</span>&#123;k(n-ak-bk)&#125;&#123;<span class="keyword">\gcd</span>(k,n)&#125;&#125;&#125; <span class="keyword">\colorbox</span>&#123;<span class="params">#</span>FFF000&#125;&#123;<span class="keyword">\boxed</span>&#123;[<span class="keyword">\gcd</span>(a,b)=1]&#125;&#125; [ak+bk <span class="keyword">\le</span> n] <span class="keyword">\\</span> </span><br><span class="line"><span class="built_in">&amp;</span>= <span class="keyword">\sum</span><span class="built_in">_</span>&#123;k=1&#125;<span class="built_in">^</span>&#123;n&#125; <span class="keyword">\dfrac</span>&#123;k&#125;&#123;<span class="keyword">\gcd</span>(k,n)&#125; <span class="keyword">\sum</span><span class="built_in">_</span>&#123;a=1&#125;<span class="built_in">^</span>&#123;<span class="keyword">\lfloor</span> n / k <span class="keyword">\rfloor</span>&#125; <span class="keyword">\sum</span><span class="built_in">_</span>&#123;b=1&#125;<span class="built_in">^</span>&#123;<span class="keyword">\lfloor</span> n / k <span class="keyword">\rfloor</span>&#125; (n - ak - bk)[ak+bk <span class="keyword">\le</span> n] <span class="keyword">\colorbox</span>&#123;<span class="params">#</span>FFF000&#125;&#123;<span class="keyword">\boxed</span>&#123;<span class="keyword">\sum</span><span class="built_in">_</span>&#123;d | <span class="keyword">\gcd</span>(a, b)&#125; <span class="keyword">\mu</span>(d)&#125;&#125; <span class="keyword">\\</span></span><br><span class="line"><span class="built_in">&amp;</span>= <span class="keyword">\sum</span><span class="built_in">_</span>&#123;k=1&#125;<span class="built_in">^</span>&#123;n&#125; <span class="keyword">\dfrac</span>&#123;k&#125;&#123;<span class="keyword">\gcd</span>(k,n)&#125; <span class="keyword">\sum</span><span class="built_in">_</span>&#123;d=1&#125;<span class="built_in">^</span>&#123;<span class="keyword">\lfloor</span> n / k <span class="keyword">\rfloor</span>&#125; <span class="keyword">\mu</span>(d) <span class="keyword">\sum</span><span class="built_in">_</span>&#123;a=1&#125;<span class="built_in">^</span>&#123;<span class="keyword">\lfloor</span> n / kd <span class="keyword">\rfloor</span>&#125; <span class="keyword">\sum</span><span class="built_in">_</span>&#123;b=1&#125;<span class="built_in">^</span>&#123;<span class="keyword">\lfloor</span> n / kd <span class="keyword">\rfloor</span> - a&#125; n - akd - bkd <span class="keyword">\\</span> </span><br><span class="line"><span class="built_in">&amp;</span>= <span class="keyword">\sum</span><span class="built_in">_</span>&#123;k=1&#125;<span class="built_in">^</span>&#123;n&#125; <span class="keyword">\dfrac</span>&#123;k&#125;&#123;<span class="keyword">\gcd</span>(k,n)&#125; <span class="keyword">\sum</span><span class="built_in">_</span>&#123;d=1&#125;<span class="built_in">^</span>&#123;<span class="keyword">\lfloor</span>&#123;n / k&#125;<span class="keyword">\rfloor</span>&#125;<span class="keyword">\mu</span>(d)<span class="keyword">\left</span>(<span class="keyword">\dfrac</span>&#123;n <span class="keyword">\lfloor</span> n / kd<span class="keyword">\rfloor</span> (<span class="keyword">\lfloor</span> n / kd <span class="keyword">\rfloor</span> - 1)&#125;&#123;2&#125;+<span class="keyword">\dfrac</span>&#123;k d <span class="keyword">\lfloor</span> n / kd <span class="keyword">\rfloor</span> (1 - &#123;<span class="keyword">\lfloor</span> n / kd <span class="keyword">\rfloor</span>&#125;<span class="built_in">^</span>&#123;2&#125;)&#125;&#123;3&#125;<span class="keyword">\right</span>) <span class="keyword">\\</span></span><br><span class="line"><span class="built_in">&amp;</span>= <span class="keyword">\sum</span><span class="built_in">_</span>&#123;k=1&#125;<span class="built_in">^</span>&#123;n&#125; <span class="keyword">\dfrac</span>&#123;k&#125;&#123;<span class="keyword">\gcd</span>(k,n)&#125; <span class="keyword">\sum</span><span class="built_in">_</span>&#123;d=1&#125;<span class="built_in">^</span>&#123;b&#125;<span class="keyword">\mu</span>(d)<span class="keyword">\left</span>(<span class="keyword">\dfrac</span>&#123;nt(t - 1)&#125;&#123;2&#125;+<span class="keyword">\dfrac</span>&#123;k d t (1 - t<span class="built_in">^</span>2)&#125;&#123;3&#125;<span class="keyword">\right</span>)</span><br><span class="line"><span class="keyword">\end</span>&#123;aligned&#125;</span><br></pre></td></tr></table></figure><h4 id="解决">解决</h4><p>去掉 <code>\colorbox&#123;</code>#<code>color&#125;&#123;anything&#125;</code> 中的<code>#</code> 即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文记录了派派遇到的各种问题。&lt;/p&gt;</summary>
    
    
    
    <category term="etc" scheme="https://tau.gay/etc/"/>
    
    
  </entry>
  
  <entry>
    <title>CF1717E</title>
    <link href="https://tau.gay/cf/1717/e/"/>
    <id>https://tau.gay/cf/1717/e/</id>
    <published>2022-09-06T09:33:32.000Z</published>
    <updated>2022-09-07T12:56:02.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p><span class="math display">\[\sum_{a + b + c = n} \operatorname {lcm} (c, \gcd(a, b)) = ?\]</span></p><span id="more"></span><ul><li><span class="math inline">\(3 \le n \le 10 ^ 5\)</span></li></ul><h2 id="解答-nlognlogn">解答 NlogNlogN</h2><p>固定 <span class="math inline">\(c, \gcd(a, b) =:d\)</span>，则问题变为求解满足 <span class="math inline">\(a + b = n - c\land (a, b) = d\)</span> 的 <span class="math inline">\((a, b)\)</span>对子数，这个数是：</p><p><span class="math display">\[\varphi\left(\dfrac{n - c}{d}\right)\]</span></p><p>其中 <span class="math inline">\(\varphi(i)\)</span> 表示欧拉函数，即<span class="math inline">\(1 \sim i\)</span> 中与 <spanclass="math inline">\(i\)</span> 互质之数的数量。 因此答案就是：</p><p><span class="math display">\[\sum_{c \in [2, n)} \sum_{d \mid n - c} \operatorname {lcm} (c, d)\times \varphi\left(\dfrac{n - c}{d}\right)\]</span></p><p>在实现上，先枚举 <span class="math inline">\(c\)</span> 再枚举 <spanclass="math inline">\(n - c\)</span>的约数的复杂度带个根号。反过来，先枚举 <spanclass="math inline">\(d\)</span> 再枚举 <spanclass="math inline">\(d\)</span> 的倍数更优。</p><figure class="highlight cpp"><figcaption><span>CF1717E.cpp >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ranges&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">constinit</span> <span class="type">int</span> mod = <span class="number">1E9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">main</span><span class="params">()</span> -&gt; <span class="type">int</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ::std::ios::<span class="built_in">sync_with_stdio</span>( <span class="keyword">not</span> ::std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>) );</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    ::std::cin &gt;&gt; N;</span><br><span class="line"></span><br><span class="line">    ::std::array&lt;<span class="type">int</span>, 200010&gt; e &#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans &#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : ::std::ranges::<span class="built_in">iota_view</span>(<span class="number">2</span>, N)) &#123;</span><br><span class="line">        e[i] += i - <span class="number">1</span>;</span><br><span class="line">        ans += <span class="number">1LL</span> * e[i] * (N - i) % ::mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j * i &lt;= N; ++j) &#123;</span><br><span class="line">            ans += <span class="number">1LL</span> * e[i] * ::std::<span class="built_in">lcm</span>(j, N - j * i) % ::mod;</span><br><span class="line">            ans %= ::mod;</span><br><span class="line">            e[j * i] -= e[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ::std::cout &lt;&lt; ans % mod &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解答-nlogn">解答 NlogN</h2><p><span class="math display">\[\begin{aligned}ans &amp;= \sum_{k=1}^{n} \sum_{a=1}^{\lfloor n / k \rfloor}\sum_{b=1}^{\lfloor n / k \rfloor}\colorbox{ADD8E6}{\boxed{\operatorname{lcm}(n-ak-bk,k)}} [\gcd(a,b)=1][ak+bk \le n] \\&amp;= \sum_{k=1}^{n} \sum_{a=1}^{\lfloor n / k \rfloor}\sum_{b=1}^{\lfloor n / k \rfloor}\colorbox{ADD8E6}{\boxed{\dfrac{k(n-ak-bk)}{\gcd(k,n)}}}\colorbox{FFF000}{\boxed{[\gcd(a,b)=1]}} [ak+bk \le n] \\&amp;= \sum_{k=1}^{n} \dfrac{k}{\gcd(k,n)} \sum_{a=1}^{\lfloor n / k\rfloor} \sum_{b=1}^{\lfloor n / k \rfloor} (n - ak - bk)[ak+bk \le n]\colorbox{FFF000}{\boxed{\sum_{d | \gcd(a, b)} \mu(d)}} \\&amp;= \sum_{k=1}^{n} \dfrac{k}{\gcd(k,n)} \sum_{d=1}^{\lfloor n / k\rfloor} \mu(d) \sum_{a=1}^{\lfloor n / kd \rfloor} \sum_{b=1}^{\lfloorn / kd \rfloor - a} n - akd - bkd \\&amp;= \sum_{k=1}^{n} \dfrac{k}{\gcd(k,n)} \sum_{d=1}^{\lfloor{n /k}\rfloor}\mu(d)\left(\dfrac{n \lfloor n / kd\rfloor (\lfloor n / kd\rfloor - 1)}{2}+\dfrac{k d \lfloor n / kd \rfloor (1 - {\lfloor n / kd\rfloor}^{2})}{3}\right) \\&amp;= \sum_{k=1}^{n} \dfrac{k}{\gcd(k,n)}\sum_{d=1}^{b}\mu(d)\left(\dfrac{nt(t - 1)}{2}+\dfrac{k d t (1 -t^2)}{3}\right)\end{aligned}\]</span></p><p><span class="math inline">\((1) \sim (3)\)</span>步骤较为容易，略去不表。</p><p>第 <span class="math inline">\((4)\)</span>步从枚举约数改为枚举倍数，对应的上下限也发生了改变。</p><p>第 <span class="math inline">\((5)\)</span> 步展开和式，结果为：<span class="math display">\[n \sum_{a = 1}^t\sum_{b = 1}^{t - a} 1 - kd \left( \sum_{a = 1}^t\sum_{b = 1}^{t - a} a + b\right)\]</span></p><p>然后...</p><div style="text-align:center"><table align="center"><tr><td><p><a href="https://www.wolframalpha.com/input?i=sum_%7Bi%3D1%7D%5Ex+sum_%7Bj%3D1%7D%5E%7Bx-i%7D+1"><img src="/img/1717E_1.png"></a></p></td><td><p><a href="https://www.wolframalpha.com/input?i=sum_%7Bi%3D1%7D%5Ex+sum_%7Bj%3D1%7D%5E%7Bx-i%7D+%28i+%2B+j%29"><img src="/img/1717E_2.png"></a></p></td></tr></table></div><p>第 <span class="math inline">\((6)\)</span>步做了若干代换，便于代码实现。</p><figure class="highlight cpp"><figcaption><span>CF1717E_mobius.cpp >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实测常数有点大 .... 就当练习了</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ranges&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">constinit</span> <span class="type">int</span> mod = <span class="number">1E9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">norm</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &gt;= ::mod ? x - ::mod : x &lt; <span class="number">0</span> ? x + ::mod : x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="function">T <span class="title">power</span><span class="params">(T a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">  T res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a *= a) &#123; <span class="keyword">if</span> (b % <span class="number">2</span>) &#123; res *= a; &#125; &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">modint</span> &#123;</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  <span class="built_in">modint</span>(<span class="type">int</span> x = <span class="number">0</span>) : <span class="built_in">x</span>(<span class="built_in">norm</span>(x)) &#123;&#125;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">  <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> modint &amp;x) &#123; <span class="keyword">return</span> os &lt;&lt; x.<span class="built_in">val</span>(); &#125;</span><br><span class="line">  modint <span class="keyword">operator</span>-() <span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">modint</span>(<span class="built_in">norm</span>(::mod - x)); &#125;</span><br><span class="line">  <span class="function">modint <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="built_in">assert</span>(x != <span class="number">0</span>); <span class="keyword">return</span> <span class="built_in">power</span>(*<span class="keyword">this</span>, ::mod - <span class="number">2</span>); &#125;</span><br><span class="line">  modint &amp;<span class="keyword">operator</span>*=(<span class="type">const</span> modint &amp;rhs) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> = <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(x) * rhs.x % ::mod;&#125;</span><br><span class="line">  modint &amp;<span class="keyword">operator</span>+=(<span class="type">const</span> modint &amp;rhs) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> = <span class="built_in">norm</span>(x + rhs.x); &#125;</span><br><span class="line">  modint &amp;<span class="keyword">operator</span>-=(<span class="type">const</span> modint &amp;rhs) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> = <span class="built_in">norm</span>(x - rhs.x); &#125;</span><br><span class="line">  modint &amp;<span class="keyword">operator</span>/=(<span class="type">const</span> modint &amp;rhs) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> *= rhs.<span class="built_in">inv</span>(); &#125;</span><br><span class="line">  <span class="keyword">friend</span> modint <span class="keyword">operator</span>+(<span class="type">const</span> modint &amp;lhs, <span class="type">const</span> modint &amp;rhs) &#123; <span class="keyword">return</span> <span class="built_in">modint</span>(lhs) += rhs; &#125;</span><br><span class="line">  <span class="keyword">friend</span> modint <span class="keyword">operator</span>-(<span class="type">const</span> modint &amp;lhs, <span class="type">const</span> modint &amp;rhs) &#123; <span class="keyword">return</span> <span class="built_in">modint</span>(lhs) -= rhs; &#125;</span><br><span class="line">  <span class="keyword">friend</span> modint <span class="keyword">operator</span>*(<span class="type">const</span> modint &amp;lhs, <span class="type">const</span> modint &amp;rhs) &#123; <span class="keyword">return</span> <span class="built_in">modint</span>(lhs) *= rhs; &#125;</span><br><span class="line">  <span class="keyword">friend</span> modint <span class="keyword">operator</span>/(<span class="type">const</span> modint &amp;lhs, <span class="type">const</span> modint &amp;rhs) &#123; <span class="keyword">return</span> <span class="built_in">modint</span>(lhs) /= rhs; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">main</span><span class="params">()</span> -&gt; <span class="type">int</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ::std::ios::<span class="built_in">sync_with_stdio</span>( <span class="keyword">not</span> ::std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>) );</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    ::std::cin &gt;&gt; N;</span><br><span class="line"></span><br><span class="line">    ::<span class="function">std::vector <span class="title">mu</span><span class="params">(N + <span class="number">1</span>, ::modint&#123; &#125;)</span></span>;</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : ::std::ranges::<span class="built_in">iota_view</span>(<span class="number">2</span>, N + <span class="number">1</span>)) &#123;</span><br><span class="line">        mu[i] -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i * <span class="number">2</span>; j &lt;= N; j += i) &#123;</span><br><span class="line">            mu[j] -= mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ::modint ans &#123; &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k : ::std::ranges::<span class="built_in">iota_view</span>(<span class="number">1</span>, N + <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="type">int</span> b = N / k;</span><br><span class="line">        ::modint sum &#123; &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> d : ::std::ranges::<span class="built_in">iota_view</span>(<span class="number">1</span>, b + <span class="number">1</span>)) &#123;</span><br><span class="line">            ::modint t = b / d;</span><br><span class="line">            sum += mu[d] * (t * (t - <span class="number">1</span>) / <span class="number">2</span> * N + t * d * k * (<span class="number">1</span> - t * t) / <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans += sum * k / ::std::<span class="built_in">gcd</span>(N, k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ::std::cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
\sum_{a + b + c = n} \operatorname {lcm} (c, \gcd(a, b)) = ?
\]&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1717" scheme="https://tau.gay/cf/1717/"/>
    
    
    <category term="数论" scheme="https://tau.gay/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="欧拉函数" scheme="https://tau.gay/tags/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    
    <category term="莫比乌斯反演" scheme="https://tau.gay/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>CF1717D</title>
    <link href="https://tau.gay/cf/1717/d/"/>
    <id>https://tau.gay/cf/1717/d/</id>
    <published>2022-09-06T09:33:30.000Z</published>
    <updated>2022-09-06T12:38:39.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p><span class="math inline">\(2 ^ n\)</span>个人参加比赛，最终决出一名胜者。<span class="math inline">\(A\)</span>先操作游戏，操作方式为决定第一场比赛对战双方，并决定每一轮谁胜出。 而<span class="math inline">\(B\)</span> 后操作游戏，有 <spanclass="math inline">\(k\)</span> 次交换胜负的机会。</p><p><span class="math inline">\(A, B\)</span> 均知道对方的操作方式，现在<span class="math inline">\(A\)</span>希望最终胜出的玩家编号尽可能小，<span class="math inline">\(B\)</span>则反之。</p><p>问最小最终胜出的玩家编号，即经过 <spanclass="math inline">\(A\)</span> 的安排之后无论 <spanclass="math inline">\(B\)</span> 如何修改，他总胜。</p><span id="more"></span><ul><li><span class="math inline">\(n \le 10 ^ 5\)</span></li><li><span class="math inline">\(k \le \min\{2 ^ n, 10 ^9\}\)</span></li></ul><h2 id="解答">解答</h2><p>二叉树深度为 <span class="math inline">\(n\)</span>，这意味着如果<span class="math inline">\(B\)</span> 操作次数 <spanclass="math inline">\(k \ge n\)</span>，他将得以令任何人成为赢家。此情形答案为 <span class="math inline">\(2 ^n\)</span></p><p>否则 <span class="math inline">\(A\)</span>总可以操纵一些选手，使得他们失败次数 <span class="math inline">\(\gtk\)</span>，这样 <span class="math inline">\(B\)</span>就无法使得这些选手获胜了。例如将最大编号的一批人安排到第一轮比赛被淘汰的那些人。形式化地说，一个选手需要<span class="math inline">\(i\)</span> 次修改才能获胜，等价于选定 <spanclass="math inline">\(i\)</span> 步令其输，这样的选手有 <spanclass="math inline">\(\displaystyle\binom{n}{i}\)</span> 位。</p><p>整个过程对于 <span class="math inline">\(B\)</span>来说，进行一次修改，等价于令编号大 <spanclass="math inline">\(\displaystyle\binom{n}{i}\)</span>，综合上面的情形，答案为：</p><p><span class="math display">\[\sum_{i = 0} ^ {\min\{n, k\}} \binom{n}{i}\]</span></p><figure class="highlight cpp"><figcaption><span>CF1717D.cpp >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ranges&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">constinit</span> <span class="type">int</span> mod = <span class="number">1E9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">main</span><span class="params">()</span> -&gt; <span class="type">int</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ::std::ios::<span class="built_in">sync_with_stdio</span>( <span class="keyword">not</span> ::std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>) );</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> N, K;</span><br><span class="line">    ::std::cin &gt;&gt; N &gt;&gt; K;</span><br><span class="line"></span><br><span class="line">    ::<span class="function">std::vector <span class="title">fac</span><span class="params">(N + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">auto</span> inf &#123; fac &#125;; <span class="comment">// inv-fac</span></span><br><span class="line"></span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : ::std::ranges::<span class="built_in">iota_view</span>(<span class="number">1</span>, N + <span class="number">1</span>)) &#123;</span><br><span class="line">        fac[i] = <span class="number">1LL</span> * fac[i - <span class="number">1</span>] * i % ::mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> m &#123; ::mod - <span class="number">2</span> &#125;;</span><br><span class="line">        <span class="keyword">auto</span> n &#123; fac[N] &#125;;</span><br><span class="line">        <span class="keyword">auto</span> &amp;A = inf[N];</span><br><span class="line"></span><br><span class="line">        A = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (m) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                A = <span class="number">1LL</span> * A * n % ::mod;</span><br><span class="line">            &#125;</span><br><span class="line">            m /= <span class="number">2</span>;</span><br><span class="line">            n = <span class="number">1LL</span> * n * n % ::mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : ::std::ranges::<span class="built_in">iota_view</span>(<span class="number">1</span>, N + <span class="number">1</span>) | ::std::views::reverse) &#123;</span><br><span class="line">        inf[i - <span class="number">1</span>] = <span class="number">1LL</span> * inf[i] * i % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans &#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : ::std::ranges::<span class="built_in">iota_view</span>(<span class="number">0</span>, <span class="number">1</span> + ::std::<span class="built_in">min</span>(N, K))) &#123;</span><br><span class="line">        <span class="comment">// binom N i</span></span><br><span class="line">        ans += <span class="number">1LL</span> * fac[N] * inf[i] % ::mod * inf[N - i] % ::mod;</span><br><span class="line">        ans %= ::mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ::std::cout &lt;&lt; ans % ::mod &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(2 ^ n\)&lt;/span&gt;
个人参加比赛，最终决出一名胜者。&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;
先操作游戏，操作方式为决定第一场比赛对战双方，并决定每一轮谁胜出。 而
&lt;span class=&quot;math inline&quot;&gt;\(B\)&lt;/span&gt; 后操作游戏，有 &lt;span
class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt; 次交换胜负的机会。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(A, B\)&lt;/span&gt; 均知道对方的操作方式，现在
&lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt;
希望最终胜出的玩家编号尽可能小，&lt;span class=&quot;math inline&quot;&gt;\(B\)&lt;/span&gt;
则反之。&lt;/p&gt;
&lt;p&gt;问最小最终胜出的玩家编号，即经过 &lt;span
class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt; 的安排之后无论 &lt;span
class=&quot;math inline&quot;&gt;\(B\)&lt;/span&gt; 如何修改，他总胜。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1717" scheme="https://tau.gay/cf/1717/"/>
    
    
    <category term="组合数学" scheme="https://tau.gay/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>CF1717C</title>
    <link href="https://tau.gay/cf/1717/c/"/>
    <id>https://tau.gay/cf/1717/c/</id>
    <published>2022-09-06T09:33:28.000Z</published>
    <updated>2022-09-06T12:38:39.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>给定两个等长数组 <span class="math inline">\(\{A\},\{B\}\)</span>，如果 <span class="math inline">\(a_i \le a_{i +1}\)</span> 就可使 <span class="math inline">\(a_i := a_i +1\)</span>，问能否使得 <span class="math inline">\(\{A\} =\{B\}\)</span> 。</p><span id="more"></span><h2 id="解答">解答</h2><p>只有增加操作，因此需要保证 <span class="math inline">\(a_i \leb_i\)</span>。 另一方面，每一个点都被 <spanclass="math inline">\(\{B\}\)</span> 所限制，每一个 <spanclass="math inline">\(a_i\)</span> 对应的 <spanclass="math inline">\(a_{i + 1}\)</span> 由 <spanclass="math inline">\(b_{i + 1}\)</span> 所限制。 如果 <spanclass="math inline">\(a_i \lt b_i \gt b_{i + 1} + 1\)</span>，那么 <spanclass="math inline">\(a_i\)</span> 最多只能变到 <spanclass="math inline">\(b_{i + 1} +1\)</span>。这种情况也不行，否则必定有解：</p><p>将满足 <span class="math inline">\(a_i \lt b_i \land a_i \gt a_{i +1}\)</span> 的点连边 <span class="math inline">\(i + 1 \rightarrowi\)</span>，意义为要修改 <span class="math inline">\(i\)</span>必然在此前修改 <span class="math inline">\(i +1\)</span>。此情形下原图无环因而必有拓扑序，从而得证。</p><figure class="highlight cpp"><figcaption><span>CF1717C.cpp >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ranges&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">main</span><span class="params">()</span> -&gt; <span class="type">int</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ::std::ios::<span class="built_in">sync_with_stdio</span>( <span class="keyword">not</span> ::std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>) );</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tests;</span><br><span class="line">    ::std::cin &gt;&gt; tests;</span><br><span class="line">    <span class="keyword">while</span> (tests --) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> N;</span><br><span class="line">        ::std::cin &gt;&gt; N;</span><br><span class="line"></span><br><span class="line">        ::<span class="function">std::vector <span class="title">A</span><span class="params">(N, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">auto</span> B &#123; A &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i : A) &#123; ::std::cin &gt;&gt; i; &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i : B) &#123; ::std::cin &gt;&gt; i; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> ok &#123; <span class="literal">true</span> &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : ::std::ranges::<span class="built_in">iota_view</span>(<span class="number">0</span>, N)) &#123;</span><br><span class="line">            <span class="comment">// a_i &gt; b_i</span></span><br><span class="line">            <span class="comment">// a_i &lt; b_i and b_i &gt; b_next + 1</span></span><br><span class="line">            <span class="keyword">if</span> (A[i] &gt; B[i] <span class="built_in">or</span> ( A[i] &lt; B[i] <span class="keyword">and</span> B[i] &gt; B[i == N - <span class="number">1</span> ? <span class="number">0</span> : i + <span class="number">1</span>] + <span class="number">1</span> )) &#123;</span><br><span class="line">                ok = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ::std::cout &lt;&lt; (ok ? <span class="string">&quot;YES\n&quot;</span> : <span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给定两个等长数组 &lt;span class=&quot;math inline&quot;&gt;\(\{A\},
\{B\}\)&lt;/span&gt;，如果 &lt;span class=&quot;math inline&quot;&gt;\(a_i \le a_{i +
1}\)&lt;/span&gt; 就可使 &lt;span class=&quot;math inline&quot;&gt;\(a_i := a_i +
1\)&lt;/span&gt;，问能否使得 &lt;span class=&quot;math inline&quot;&gt;\(\{A\} =
\{B\}\)&lt;/span&gt; 。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1717" scheme="https://tau.gay/cf/1717/"/>
    
    
    <category term="拓扑排序" scheme="https://tau.gay/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>CF1717B</title>
    <link href="https://tau.gay/cf/1717/b/"/>
    <id>https://tau.gay/cf/1717/b/</id>
    <published>2022-09-06T09:33:25.000Z</published>
    <updated>2022-09-06T10:04:24.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>构造一个 <span class="math inline">\(n \times n\)</span>的矩阵，使得任 <span class="math inline">\(k,\;(k \mid n)\)</span>个相邻的格子中都至少包含一个 <code>X</code>，同时限定 <spanclass="math inline">\((r, c)\)</span> 位置上为 <code>X</code>。</p><p>构造 <code>X</code> 数量最少的方案。</p><span id="more"></span><h2 id="解答">解答</h2><p>如果没有 <span class="math inline">\((r, c)\)</span>这一限制的话，只需涂满对角线，答案为 <spanclass="math inline">\(\dfrac{n ^2}{k}\)</span>。而如果加入此限制，则可以将对角线移动，直至其包含 <spanclass="math inline">\((r, c)\)</span>。于是，从对角线对应的 <spanclass="math inline">\(y = x\)</span> 转变为 <spanclass="math inline">\(y - c = x + r\)</span>，那么答案就是所有模 <spanclass="math inline">\(k\)</span> 同余 <span class="math inline">\(r +c\)</span> 的点了。</p><figure class="highlight cpp"><figcaption><span>CF1717B.cpp >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ranges&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">main</span><span class="params">()</span> -&gt; <span class="type">int</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ::std::ios::<span class="built_in">sync_with_stdio</span>( <span class="keyword">not</span> ::std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>) );</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tests;</span><br><span class="line">    ::std::cin &gt;&gt; tests;</span><br><span class="line">    <span class="keyword">while</span> (tests --) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> N, K, R, C;</span><br><span class="line">        ::std::cin &gt;&gt; N &gt;&gt; K &gt;&gt; R &gt;&gt; C;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> M = (R + C) % K;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : ::std::ranges::<span class="built_in">iota_view</span>(<span class="number">1</span>, N + <span class="number">1</span>)) &#123;</span><br><span class="line">            ::<span class="function">std::string <span class="title">x</span><span class="params">(N + <span class="number">1</span>, <span class="string">&#x27;x&#x27;</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j : ::std::ranges::<span class="built_in">iota_view</span>(<span class="number">1</span>, N + <span class="number">1</span>)) &#123;</span><br><span class="line">                x[j] = <span class="string">&quot;.X&quot;</span>[(i + j) % K == M];</span><br><span class="line">            &#125;</span><br><span class="line">            ::std::cout &lt;&lt; x.<span class="built_in">substr</span>(<span class="number">1</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;构造一个 &lt;span class=&quot;math inline&quot;&gt;\(n \times n\)&lt;/span&gt;
的矩阵，使得任 &lt;span class=&quot;math inline&quot;&gt;\(k,\;(k \mid n)\)&lt;/span&gt;
个相邻的格子中都至少包含一个 &lt;code&gt;X&lt;/code&gt;，同时限定 &lt;span
class=&quot;math inline&quot;&gt;\((r, c)\)&lt;/span&gt; 位置上为 &lt;code&gt;X&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;构造 &lt;code&gt;X&lt;/code&gt; 数量最少的方案。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1717" scheme="https://tau.gay/cf/1717/"/>
    
    
    <category term="构造" scheme="https://tau.gay/tags/%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>CF1717A</title>
    <link href="https://tau.gay/cf/1717/A/"/>
    <id>https://tau.gay/cf/1717/A/</id>
    <published>2022-09-06T09:33:22.000Z</published>
    <updated>2022-09-06T09:57:43.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>计算满足 <span class="math inline">\(\dfrac{\operatorname{lcm}(a,b)}{\gcd(a, b)} \le 3\)</span> 的 <span class="math inline">\((a,b)\)</span> 对子数量。其中 <span class="math inline">\(1 \le a, b \leN\)</span> 。</p><span id="more"></span><h2 id="解答">解答</h2><p>熟知 <span class="math inline">\(\operatorname{LHS} = \prod\limits_{i= 1}^kp_i^{\max\{\alpha_i, \beta_i\} - \min\{\alpha_i,\beta_i\}}\)</span>。不妨将每一项都对换，使得 <spanclass="math inline">\(a\)</span> 中的每一个 <spanclass="math inline">\(\alpha_i\)</span> 都不小于 <spanclass="math inline">\(b\)</span> 中的 <spanclass="math inline">\(\beta_i\)</span>。</p><p>于是有 <span class="math inline">\(\dfrac{a&#39;}{b&#39;} \le3\)</span>，考虑上述操作的顺序影响，答案形如 <spanclass="math inline">\((x, x), (x, 2x)_{cyc}, (x,3x)_{cyc}\)</span>。即答案为：</p><p><span class="math display">\[\Bigg\lfloor\frac{N}{1}\Bigg\rfloor +\Bigg\lfloor\frac{N}{2}\Bigg\rfloor\times2 +\Bigg\lfloor\frac{N}{3}\Bigg\rfloor\times2\]</span></p><figure class="highlight cpp"><figcaption><span>CF1717A.cpp >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">main</span><span class="params">()</span> -&gt; <span class="type">int</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ::std::ios::<span class="built_in">sync_with_stdio</span>( <span class="keyword">not</span> ::std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>) );</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tests;</span><br><span class="line">    ::std::cin &gt;&gt; tests;</span><br><span class="line">    <span class="keyword">while</span> (tests --) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int64_t</span> N;</span><br><span class="line">        ::std::cin &gt;&gt; N;</span><br><span class="line"></span><br><span class="line">        ::std::cout &lt;&lt; (N + N / <span class="number">2</span> * <span class="number">2</span> + N / <span class="number">3</span> * <span class="number">2</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;计算满足 &lt;span class=&quot;math inline&quot;&gt;\(\dfrac{\operatorname{lcm}(a,
b)}{\gcd(a, b)} \le 3\)&lt;/span&gt; 的 &lt;span class=&quot;math inline&quot;&gt;\((a,
b)\)&lt;/span&gt; 对子数量。其中 &lt;span class=&quot;math inline&quot;&gt;\(1 \le a, b \le
N\)&lt;/span&gt; 。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1717" scheme="https://tau.gay/cf/1717/"/>
    
    
    <category term="算术基本定理" scheme="https://tau.gay/tags/%E7%AE%97%E6%9C%AF%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>若干杂题、水题</title>
    <link href="https://tau.gay/acm/etc/"/>
    <id>https://tau.gay/acm/etc/</id>
    <published>2022-09-03T01:00:00.000Z</published>
    <updated>2022-09-03T09:17:30.272Z</updated>
    
    <content type="html"><![CDATA[<div class="post-summary"><p>本文记录了若干题目，难以分类的同时很可能也没有 OJ 测。</p><p>有的是记不清来源的题，甚至仅仅是听过一次，有的也可能只是口胡的题，还有的只是因为题目太水但还是想放在网站上所以挂在这里懒得另开一篇新文。</p></div><span id="more"></span><style type="text/css">.post-summary { display: none; }</style><h2 id="子集和">子集和</h2><p>每一个元素在 <span class="math inline">\(2 ^ n\)</span> 个子集出现<span class="math inline">\(2 ^ {n - 1}\)</span> 次，因此答案为 <spanclass="math inline">\(2 ^ {n - 1} \times \sum\limits_{i = 1}^na_i.\)</span></p><h2 id="子段和">子段和</h2><p>考虑每一个元素前驱后继覆盖到的区间数量，两部分独立，因此答案为 <spanclass="math inline">\(\sum\limits_{i = 1}^n i \times (n - i) \timesa_i\)</span></p><h2id="最少修改多少数使得原数组非严格递增">最少修改多少数使得原数组非严格递增</h2><p>考虑贪心，<span class="math inline">\(n - \mathop{\rmLIS}\limits_{i=1}^n\{a_i\}\)</span> 即为所求。其中 <spanclass="math inline">\(\rm LIS\)</span> 非严格。</p><h2id="最少修改多少数使得原数组严格递增">最少修改多少数使得原数组严格递增</h2><p>如果两数大小关系不小于间隔距离，那么这两个点可以保留。形式化地说，需要满足：</p><p><span class="math display">\[a_j - a_i \ge j - i \Rightarrow a_j - j \ge a_i - i\]</span></p><p>于是 <span class="math inline">\(n - \mathop{\rmLIS}\limits_{i=1}^n\{a_i - i\}\)</span> 即为所求。</p><h2 id="最大子段积">最大子段积</h2><p>需要考虑负数，因此维护两个最值。</p><figure class="highlight cpp"><figcaption><span>max-subarray-product.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i64 m &#123; a[<span class="number">0</span>] &#125;, M &#123; a[<span class="number">0</span>] &#125;, ans &#123; a[<span class="number">0</span>] &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : a | views::<span class="built_in">drop</span>(<span class="number">1</span>)) &#123;</span><br><span class="line">    <span class="built_in">tie</span>(m, M) = <span class="built_in">minmax</span>(&#123; i, i * m, i * M &#125;);</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, M);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;post-summary&quot;&gt;
&lt;p&gt;本文记录了若干题目，难以分类的同时很可能也没有 OJ 测。&lt;/p&gt;
&lt;p&gt;有的是记不清来源的题，甚至仅仅是听过一次，有的也可能只是口胡的题，还有的只是因为题目太水但还是想放在网站上所以挂在这里懒得另开一篇新文。&lt;/p&gt;
&lt;/div&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    
  </entry>
  
  <entry>
    <title>CF652D</title>
    <link href="https://tau.gay/cf/652/d/"/>
    <id>https://tau.gay/cf/652/d/</id>
    <published>2022-08-23T12:36:43.000Z</published>
    <updated>2022-08-24T19:26:39.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>给定若干线段，问每条线段包含多少条其他线段，保证端点不重合。</p><span id="more"></span><ul><li><span class="math inline">\(1 \le n \le 2 \times 10 ^5\)</span></li><li><span class="math inline">\(- 10 ^ 9 \le l_i \lt r_i \le 10 ^9\)</span></li></ul><h2 id="解答">解答</h2><p>线段之间的包含关系可以描述为</p><p><span class="math display">\[(l_i, r_i) \prec (l_j, r_j) \xlongequal{ 等价于 } l_i \gt l_j \land r_i\lt r_j\]</span></p><p>这样问题就转化为二维数点了，数据保证不重合，自然也不需要考虑<a href="/2d-precede-compare/">排序</a>。</p><figure class="highlight cpp"><figcaption><span>CF652D.cpp >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ CF652D.cpp -std=c++17 -Os -DLOCAL -o CF652D</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> maxn = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line">array&lt;<span class="type">int</span>, 3&gt; a[maxn];</span><br><span class="line"><span class="type">int</span> c[maxn], tot;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tr[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qry</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> ans&#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (; i; i -= i &amp; -i) &#123;</span><br><span class="line">    ans += tr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt;= n; i += i &amp; -i) &#123;</span><br><span class="line">    tr[i] += x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    cin &gt;&gt; a[i][<span class="number">0</span>] &gt;&gt; a[i][<span class="number">1</span>];</span><br><span class="line">    a[i][<span class="number">2</span>] = i;</span><br><span class="line">    c[i] = a[i][<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n, [](<span class="keyword">auto</span> &amp;a, <span class="keyword">auto</span> &amp;b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[<span class="number">0</span>] == b[<span class="number">0</span>]) &#123;</span><br><span class="line">      <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>];</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">sort</span>(c + <span class="number">1</span>, c + <span class="number">1</span> + n);</span><br><span class="line">  tot = <span class="built_in">unique</span>(c + <span class="number">1</span>, c + <span class="number">1</span> + n) - (c + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="built_in">lower_bound</span>(c + <span class="number">1</span>, c + <span class="number">1</span> + tot, a[i][<span class="number">1</span>]) - c;</span><br><span class="line">    ans[a[i][<span class="number">2</span>]] += <span class="built_in">qry</span>(l);</span><br><span class="line">    <span class="built_in">mdf</span>(l, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给定若干线段，问每条线段包含多少条其他线段，保证端点不重合。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="652" scheme="https://tau.gay/cf/652/"/>
    
    
    <category term="树状数组" scheme="https://tau.gay/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    <category term="二维偏序" scheme="https://tau.gay/tags/%E4%BA%8C%E7%BB%B4%E5%81%8F%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>CF1320C</title>
    <link href="https://tau.gay/cf/1320/c/"/>
    <id>https://tau.gay/cf/1320/c/</id>
    <published>2022-08-22T17:35:42.000Z</published>
    <updated>2022-08-23T12:35:00.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>从若干剑与盾中各买一把，决定你的 🗡️ 攻击力与 🛡 防御力。随后讨伐若干👾。如果攻击力、防御力都大于某 👾，将获得对应的 💰赏金。求最大利益，即获得的赏金减去购买武器的花费。</p><span id="more"></span><ul><li>剑、盾、怪兽的数量均低于 <span class="math inline">\(2 \times 10 ^5\)</span></li><li>👾 的 🗡️ 攻击力和 🛡 防御力均 <span class="math inline">\(\le 10 ^6\)</span> 而勇士的均低于 <span class="math inline">\(10 ^9\)</span></li><li>💰 收益 <span class="math inline">\(\le 10 ^ 3\)</span></li></ul><h2 id="解答">解答</h2><!--二维偏序，设 $a, d$ 为<u class="WAV">攻击力</u><sub>attack</u></sub>和<u class="WAV">防御力</u><sub>defense</sub>，则：$$(a_i, d_i) \prec (a_j, d_j) \xlongequal{等价于} a_i \lt a_j \land d_i \lt d_j$$--><style>.WAV {    text-decoration-style: dotted;}</style><p>依然是二维偏序问题，但本题并不直接数点。而是对于固定的 <spanclass="math inline">\(a\)</span> 寻找使得利益最大化的 <spanclass="math inline">\(d\)</span>。其中 <span class="math inline">\(a,d\)</span>为<u class="WAV">攻击力</u><sub>attack</u></sub>和<u class="WAV">防御力</u><sub>defense</sub>。为方便考虑，首先对于数据与询问都按照<span class="math inline">\(a\)</span>排序，同时注意到怪兽全体攻防力都不大，可以免去离散化。</p><p>对于每个 <span class="math inline">\(d\)</span>都能使用二分求出最小能打败怪兽的防御值 <spanclass="math inline">\(d\)</span>，选取最大的收益。对于任何大于当前 <spanclass="math inline">\((a, d)\)</span> 的组合都可加上此贡献。即区间加数 +区间最大值询问，上线段树。</p><figure class="highlight cpp"><figcaption><span>CF1320C.cpp >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ CF1320C.cpp -std=c++23 -Os -o CF1320C</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2E5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> ll  INF  = <span class="number">1E18</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, p;</span><br><span class="line"></span><br><span class="line">array&lt;ll, 2&gt; a[maxn], d[maxn];</span><br><span class="line">array&lt;ll, 3&gt; q[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segment</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    ll  max, tag;</span><br><span class="line">&#125; T[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls i &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs ls | 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    T[i].max = <span class="built_in">max</span>(T[ls].max, T[rs].max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T[i] = &#123;.l = l, .r = r&#125;; l == r) &#123;</span><br><span class="line">        T[i].max = -d[l][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(ls, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(rs, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdn</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T[i].tag) &#123;</span><br><span class="line">        T[ls].max += T[i].tag;</span><br><span class="line">        T[rs].max += T[i].tag;</span><br><span class="line">        T[ls].tag += T[i].tag;</span><br><span class="line">        T[rs].tag += T[i].tag;</span><br><span class="line">        T[i].tag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">upd</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T[i].l &gt;= l &amp;&amp; T[i].r &lt;= r) &#123;</span><br><span class="line">        T[i].max += k;</span><br><span class="line">        T[i].tag += k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdn</span>(i);</span><br><span class="line">    <span class="type">int</span> mid = (T[i].l + T[i].r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">upd</span>(ls, l, r, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) &#123;</span><br><span class="line">        <span class="built_in">upd</span>(rs, l, r, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i][<span class="number">0</span>] &gt;&gt; a[i][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; d[i][<span class="number">0</span>] &gt;&gt; d[i][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= p; i++) &#123;</span><br><span class="line">        cin &gt;&gt; q[i][<span class="number">0</span>] &gt;&gt; q[i][<span class="number">1</span>] &gt;&gt; q[i][<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(d + <span class="number">1</span>, d + <span class="number">1</span> + m);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + <span class="number">1</span> + p);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line"></span><br><span class="line">    ll l = <span class="number">1</span>, ans = -INF;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 固定攻击力</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= p &amp;&amp; l &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// 跳过所有 (a, d) 打不过怪兽的点</span></span><br><span class="line">        <span class="keyword">while</span> (l &lt;= n &amp;&amp; q[i][<span class="number">0</span>] &gt;= a[l][<span class="number">0</span>]) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, T[<span class="number">1</span>].max - a[l++][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到最小能打掉怪兽的 d 随后将后续区间 [g, m] 都加上 q[i][2]</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="type">int</span> g = <span class="built_in">lower_bound</span>(d + <span class="number">1</span>, d + <span class="number">1</span> + m, array&lt;ll, <span class="number">2</span>&gt;&#123;q[i][<span class="number">1</span>], &#123;&#125;&#125;) - d; g &lt;= m) &#123;</span><br><span class="line">            <span class="built_in">upd</span>(<span class="number">1</span>, g, m, q[i][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= n; i++) &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, T[<span class="number">1</span>].max - a[i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;从若干剑与盾中各买一把，决定你的 🗡️ 攻击力与 🛡 防御力。随后讨伐若干
👾。如果攻击力、防御力都大于某 👾，将获得对应的 💰
赏金。求最大利益，即获得的赏金减去购买武器的花费。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1320" scheme="https://tau.gay/cf/1320/"/>
    
    
    <category term="二维偏序" scheme="https://tau.gay/tags/%E4%BA%8C%E7%BB%B4%E5%81%8F%E5%BA%8F/"/>
    
    <category term="线段树" scheme="https://tau.gay/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>P2163</title>
    <link href="https://tau.gay/p/2163/"/>
    <id>https://tau.gay/p/2163/</id>
    <published>2022-08-21T20:14:18.000Z</published>
    <updated>2022-08-22T17:09:49.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>这是二维数点的模板题。</p><p>多次查询平面上某矩形内的点数，一个坐标上可能有多个点。</p><span id="more"></span><ul><li>点数 <span class="math inline">\(5 \times 10 ^ 5\)</span></li><li>大小 <span class="math inline">\(10 ^ 7\)</span></li><li>询问次数 <span class="math inline">\(5 \times 10 ^ 5\)</span></li></ul><p><a href="https://www.luogu.com.cn/problem/P2163"class="uri">https://www.luogu.com.cn/problem/P2163</a></p><p><a href="https://darkbzoj.cc/problem/1935"class="uri">https://darkbzoj.cc/problem/1935</a></p><h2 id="解答">解答</h2><p>根据二维前缀和的启示，只需要求得从 <span class="math inline">\((0,0)\)</span> 到 <span class="math inline">\((x, y)\)</span>这个矩形的信息，就可以 <span class="math inline">\(\mathcalO(1)\)</span> 计算出答案。</p><figure class="highlight latex"><figcaption><span>具体而言不出来了。😅 博客站居然渲染不了下面这段代码，反正就是容斥一下。>folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;aligned&#125;</span><br><span class="line"><span class="built_in">&amp;</span><span class="keyword">\boxed</span>&#123;S<span class="built_in">_</span>&#123;&#123;x<span class="built_in">_</span>1, y<span class="built_in">_</span>1&#125; <span class="keyword">\rightarrow</span> &#123;x<span class="built_in">_</span>2, y<span class="built_in">_</span>2&#125;&#125;&#125;<span class="keyword">\\</span></span><br><span class="line">=<span class="keyword">\quad</span><span class="built_in">&amp;</span>S<span class="built_in">_</span>&#123;0, 0 <span class="keyword">\rightarrow</span> &#123;x<span class="built_in">_</span>2, y<span class="built_in">_</span>2&#125;&#125;</span><br><span class="line"><span class="keyword">\quad</span><span class="built_in">&amp;</span>-</span><br><span class="line"><span class="keyword">\quad</span><span class="built_in">&amp;</span>S<span class="built_in">_</span>&#123;0, 0 <span class="keyword">\rightarrow</span> &#123;x<span class="built_in">_</span>2, y<span class="built_in">_</span>1 - 1&#125;&#125;<span class="keyword">\\</span>-</span><br><span class="line"><span class="keyword">\quad</span><span class="built_in">&amp;</span>S<span class="built_in">_</span>&#123;0, 0 <span class="keyword">\rightarrow</span> &#123;x<span class="built_in">_</span>1 - 1, y<span class="built_in">_</span>2&#125;&#125;</span><br><span class="line"><span class="keyword">\quad</span><span class="built_in">&amp;</span>+</span><br><span class="line"><span class="keyword">\quad</span><span class="built_in">&amp;</span>S<span class="built_in">_</span>&#123;0, 0 <span class="keyword">\rightarrow</span> &#123;x<span class="built_in">_</span>1 - 1, y<span class="built_in">_</span>1 - 1&#125;&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;aligned&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p>朴素的二维前缀和花费 <span class="math inline">\(\mathcal O(n ^2)\)</span>，当然是不行的，重新整理问题，即求：</p><p><span class="math display">\[\sum_{i=0}^{x} \sum_{j=0}^y S_{i, j} \xlongequal{等价于}\sum_{i=0}^{x}\sum_{j=0}^y [(i, j) \prec (x, y)], \mathrm{\;where\;} i \le x \land j\le y\]</span></p><p>这样的点对，可以用先前提到的二维偏序解决。尽管坐标上可能会有点重复，但并不影响。将询问离线下来之后和原数据都按照横坐标排序。接着离散化，最后用树状数组统计答案：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; i &lt;= t; ++i) &#123;</span><br><span class="line">    <span class="comment">// 把小于当前询问横坐标的点(的纵坐标)加到树状数组里</span></span><br><span class="line">    <span class="keyword">while</span> (j &lt;= n &amp;&amp; a[j][<span class="number">0</span>] &lt;= q[i][<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="built_in">mdf</span>(a[j++][<span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对于每个询问 求出前缀和 利用容斥标记符号</span></span><br><span class="line">    ans[q[i][<span class="number">2</span>]] += q[i][<span class="number">3</span>] * <span class="built_in">qry</span>(q[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><del>下面的代码吸吸氧才能过</del><figure class="highlight cpp"><figcaption><span>P2163.cpp >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++11 P2163.cpp -o P2163 -std=c++11 -O2</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> maxn = <span class="number">5000005</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// x, y</span></span><br><span class="line">array&lt;<span class="type">int</span>, 2&gt; a[maxn];</span><br><span class="line"><span class="comment">// x, y, id, weight</span></span><br><span class="line">array&lt;<span class="type">int</span>, 4&gt; q[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n, m, t, ans[maxn];</span><br><span class="line"><span class="type">int</span> c[maxn * <span class="number">5</span>], tot;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tr[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qry</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (; i; i -= i &amp; -i) &#123;</span><br><span class="line">        ans += tr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt;= n; i += i &amp; -i) &#123;</span><br><span class="line">        tr[i] += v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i][<span class="number">0</span>] &gt;&gt; a[i][<span class="number">1</span>];</span><br><span class="line">        a[i][<span class="number">0</span>] += <span class="number">1</span>, a[i][<span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">        c[++tot] = a[i][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        array&lt;<span class="type">int</span>, 4&gt; qi&#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            cin &gt;&gt; qi[j];</span><br><span class="line">            qi[j] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 询问左上角的点记的是 y_1 - 1</span></span><br><span class="line">        c[++tot] = qi[<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">        c[++tot] = qi[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        q[++t] = &#123;qi[<span class="number">0</span>] - <span class="number">1</span>, qi[<span class="number">1</span>] - <span class="number">1</span>, i, <span class="number">1</span>&#125;; <span class="comment">// (x1 - 1, y1 - 1)</span></span><br><span class="line">        q[++t] = &#123;qi[<span class="number">0</span>] - <span class="number">1</span>, qi[<span class="number">3</span>], i, <span class="number">-1</span>&#125;;    <span class="comment">// (x1 - 1, y2)</span></span><br><span class="line">        q[++t] = &#123;qi[<span class="number">2</span>], qi[<span class="number">1</span>] - <span class="number">1</span>, i, <span class="number">-1</span>&#125;;    <span class="comment">// (x2, y1 - 1)</span></span><br><span class="line">        q[++t] = &#123;qi[<span class="number">2</span>], qi[<span class="number">3</span>], i, <span class="number">1</span>&#125;;         <span class="comment">// (x2, y2)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(c + <span class="number">1</span>, c + <span class="number">1</span> + tot);</span><br><span class="line">    tot = <span class="built_in">unique</span>(c + <span class="number">1</span>, c + <span class="number">1</span> + tot) - (c + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        a[i][<span class="number">1</span>] = <span class="built_in">lower_bound</span>(c + <span class="number">1</span>, c + <span class="number">1</span> + tot, a[i][<span class="number">1</span>]) - c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t; ++i) &#123;</span><br><span class="line">        q[i][<span class="number">1</span>] = <span class="built_in">lower_bound</span>(c + <span class="number">1</span>, c + <span class="number">1</span> + tot, q[i][<span class="number">1</span>]) - c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + <span class="number">1</span> + t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; i &lt;= t; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &lt;= n &amp;&amp; a[j][<span class="number">0</span>] &lt;= q[i][<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="built_in">mdf</span>(a[j++][<span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans[q[i][<span class="number">2</span>]] += q[i][<span class="number">3</span>] * <span class="built_in">qry</span>(q[i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;这是二维数点的模板题。&lt;/p&gt;
&lt;p&gt;多次查询平面上某矩形内的点数，一个坐标上可能有多个点。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="p" scheme="https://tau.gay/p/"/>
    
    <category term="luogu" scheme="https://tau.gay/luogu/"/>
    
    
    <category term="树状数组" scheme="https://tau.gay/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    <category term="二维偏序" scheme="https://tau.gay/tags/%E4%BA%8C%E7%BB%B4%E5%81%8F%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>51nod1376</title>
    <link href="https://tau.gay/51nod/1376/"/>
    <id>https://tau.gay/51nod/1376/</id>
    <published>2022-08-20T18:00:56.000Z</published>
    <updated>2022-09-03T09:17:11.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>序列中有多少个 <span class="math inline">\(\rmLIS\)</span>（位置不同就算做不同）？</p><span id="more"></span><p><a href="https://www.51nod.com/Challenge/Problem.html#problemId=1376"class="uri">https://www.51nod.com/Challenge/Problem.html#problemId=1376</a></p><h2 id="解答">解答</h2><del>如果遇到过的话应该很容易，单纯想放在博客站上而已。</del><p>直接考虑树状数组合并 LIS 的过程，注意本题需要离散化。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> N   = <span class="number">500007</span>;</span><br><span class="line"><span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="built_in">Info</span>(<span class="type">int</span> _a = <span class="number">0</span>, <span class="type">int</span> _b = <span class="number">0</span>) : <span class="built_in">a</span>(_a), <span class="built_in">b</span>(_b) &#123;&#125;</span><br><span class="line">    Info <span class="keyword">operator</span>+=(<span class="type">const</span> Info&amp; y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &lt; y.b) &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span> = y;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b &gt; y.b) &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span> = <span class="built_in">Info</span>((a + y.a) % mod, b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  tot, n, a[N], b[N];</span><br><span class="line">Info c[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> i, Info val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt;= tot; i += i &amp; -i) &#123;</span><br><span class="line">        c[i] += val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Info <span class="title">qry</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    Info ans&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (; i; i -= i &amp; -i) &#123;</span><br><span class="line">        ans += c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n, b + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + n);</span><br><span class="line">    tot = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + n) - b - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    Info ans&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + tot, a[i]) - b;</span><br><span class="line"></span><br><span class="line">        Info cur = <span class="built_in">qry</span>(l - <span class="number">1</span>);</span><br><span class="line">        cur.a    = <span class="built_in">max</span>(cur.a, <span class="number">1</span>);</span><br><span class="line">        cur.b += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        ans += cur;</span><br><span class="line">        <span class="built_in">mdf</span>(l, cur);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans.a &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;序列中有多少个 &lt;span class=&quot;math inline&quot;&gt;\(\rm
LIS\)&lt;/span&gt;（位置不同就算做不同）？&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="51nod" scheme="https://tau.gay/51nod/"/>
    
    
    <category term="树状数组" scheme="https://tau.gay/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    <category term="AWESOME" scheme="https://tau.gay/tags/AWESOME/"/>
    
    <category term="LIS" scheme="https://tau.gay/tags/LIS/"/>
    
  </entry>
  
  <entry>
    <title>CF1313C1</title>
    <link href="https://tau.gay/cf/1313/c1/"/>
    <id>https://tau.gay/cf/1313/c1/</id>
    <published>2022-08-20T17:41:42.000Z</published>
    <updated>2022-08-21T17:59:34.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>是 <a href="/cf/1313/c2/">CF1313C2</a> 的简单版。</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;是 &lt;a href=&quot;/cf/1313/c2/&quot;&gt;CF1313C2&lt;/a&gt; 的简单版。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1313" scheme="https://tau.gay/cf/1313/"/>
    
    
    <category term="nge" scheme="https://tau.gay/tags/nge/"/>
    
    <category term="dp" scheme="https://tau.gay/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>CF1313C2</title>
    <link href="https://tau.gay/cf/1313/c2/"/>
    <id>https://tau.gay/cf/1313/c2/</id>
    <published>2022-08-20T17:41:42.000Z</published>
    <updated>2022-08-22T17:22:47.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>建造摩天楼，每一块地上最高能建造的摩天楼层数 <spanclass="math inline">\(a_i \le m_i\)</span>。且不能出现 <spanclass="math inline">\(i &lt; j &lt; k \land a_i &gt; a_j &lt;a_k\)</span>的情况，即不能有「一幢楼左右都有比他高的大厦（不必相邻）」。</p><p>求 <span class="math inline">\(\max \displaystyle \left\{\sum_{i =1}^n\{A\}\right\}\)</span> 对应的一组方案。</p><span id="more"></span><h2 id="解答">解答</h2><p>答案一定形如 <span class="math inline">\(/\backslash\)</span>先单调不减、再单调不增。假定非也，则必有这样的答案是更优的解。</p><p>于是，对于每一个 <span class="math inline">\(a_i\)</span>都需要找到它左边最近的 <span class="math inline">\(j\)</span> 使得 <spanclass="math inline">\(a_j \lt a_i\)</span>，即nge。这一段的解就可以全部更改为 <spanclass="math inline">\(a_i\)</span>。</p><p>也就是以 <span class="math inline">\(i\)</span> 为最高点的一段答案为<span class="math inline">\(l_{[\operatorname{nge}^L_il]} = a_i \times(i -\operatorname{nge}^L_i)\)</span>。由于上述讨论分段的特性，因而，实际上<span class="math inline">\(l_i\)</span> 是一个前缀和。即</p><p><span class="math display">\[l_i = a_i \times (i - \operatorname{nge}^L_i) +l_{\operatorname{nge}^L_i}\]</span></p><p>同理有，右半部分的后缀和：</p><p><span class="math display">\[r_i = a_i \times (\operatorname{nge}^R_i - i) +r_{\operatorname{nge}^R_i}\]</span></p><p>使用单调栈求得两个方向的 <spanclass="math inline">\(\operatorname{nge}\)</span>。</p><p>综合两部分来看，以 <span class="math inline">\(i\)</span>为最高点的答案实际上就是 <spanclass="math inline">\(\color{red}\boxed{l_i + r_i -a_i}\)</span>。最大的点即为所求，设为 <spanclass="math inline">\(M\)</span>。</p><p>求得 <span class="math inline">\(M\)</span>之后，向左右做后缀、前缀最小值就可以了。思路并不困难，编码时需要仔细，不要写错了。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> V views</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">1</span>, n + <span class="number">1</span>)) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">stk</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span>         top&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nxt</span><span class="params">(n + <span class="number">1</span>, n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">1</span>, n + <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">while</span> (top &amp;&amp; a[stk[top]] &gt; a[i]) &#123;</span><br><span class="line">            nxt[stk[top--]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        stk[++top] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">s</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">1</span>, n + <span class="number">1</span>) | V::reverse) &#123;</span><br><span class="line">        s[i] = <span class="number">1LL</span> * a[i] * (nxt[i] - i) + s[nxt[i]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    top = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pre</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">1</span>, n + <span class="number">1</span>) | V::reverse) &#123;</span><br><span class="line">        <span class="keyword">while</span> (top &amp;&amp; a[stk[top]] &gt; a[i]) &#123;</span><br><span class="line">            pre[stk[top--]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        stk[++top] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">p</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">1</span>, n + <span class="number">1</span>)) &#123;</span><br><span class="line">        p[i] = <span class="number">1LL</span> * a[i] * (i - pre[i]) + p[pre[i]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">1</span>, n + <span class="number">1</span>)) &#123;</span><br><span class="line">        dp[i] = p[i] + s[i] - a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> M = R::<span class="built_in">max_element</span>(dp | V::<span class="built_in">drop</span>(<span class="number">1</span>)) - dp.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> pre = a[M]; <span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">1</span>, M) | V::reverse) &#123;</span><br><span class="line">        ans[i] = (pre = <span class="built_in">min</span>(pre, a[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> pre = a[M]; <span class="type">int</span> i : <span class="built_in">RI</span>(M + <span class="number">1</span>, n + <span class="number">1</span>)) &#123;</span><br><span class="line">        ans[i] = (pre = <span class="built_in">min</span>(pre, a[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans[M] = a[M];</span><br><span class="line"></span><br><span class="line">    R::<span class="built_in">copy</span>(ans | V::<span class="built_in">drop</span>(<span class="number">1</span>), <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;建造摩天楼，每一块地上最高能建造的摩天楼层数 &lt;span
class=&quot;math inline&quot;&gt;\(a_i \le m_i\)&lt;/span&gt;。且不能出现 &lt;span
class=&quot;math inline&quot;&gt;\(i &amp;lt; j &amp;lt; k \land a_i &amp;gt; a_j &amp;lt;
a_k\)&lt;/span&gt;
的情况，即不能有「一幢楼左右都有比他高的大厦（不必相邻）」。&lt;/p&gt;
&lt;p&gt;求 &lt;span class=&quot;math inline&quot;&gt;\(\max \displaystyle \left\{\sum_{i =
1}^n\{A\}\right\}\)&lt;/span&gt; 对应的一组方案。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1313" scheme="https://tau.gay/cf/1313/"/>
    
    
    <category term="nge" scheme="https://tau.gay/tags/nge/"/>
    
    <category term="dp" scheme="https://tau.gay/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>CF1311F</title>
    <link href="https://tau.gay/cf/1311/f/"/>
    <id>https://tau.gay/cf/1311/f/</id>
    <published>2022-08-20T09:41:55.000Z</published>
    <updated>2022-08-21T17:59:34.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>数轴上有若干点，第 <span class="math inline">\(i\)</span>个点初始坐标为 <span class="math inline">\(x_i\)</span>，速度为 <spanclass="math inline">\(v_i\)</span>。<spanclass="math inline">\(t\)</span> 时刻的坐标为 <spanclass="math inline">\(x_i + t \times v_i\)</span>。</p><p>初始时坐标两两不同，问对于任意两个点任意时刻可能的最短距离 <spanclass="math inline">\(d(i, j)\)</span> 之和。即求</p><p><span class="math display">\[\sum_{1 \le i \lt j \le n}  d(i, j)\]</span></p><span id="more"></span><h2 id="解答">解答</h2><p>因为 <span class="math inline">\(x\)</span> 初始两两不同，不妨设<span class="math inline">\(x_i &lt; x_j\)</span>。若 <spanclass="math inline">\(v_i \lev_j\)</span>，距离差不会变得更小，于是最短距离就是初态的距离。否则必定相遇，即距离差最小为<span class="math inline">\(0\)</span>。</p><p>因而问题转变为满足 <span class="math inline">\((x_i, v_i) \prec (x_j,v_j) \xlongequal{\rm equals\;\;to} x_i \lt x_j \land v_i \lev_j\)</span> 的点之间的距离。</p><p>于是需要维护「满足偏序的点对数」及「其各点到原点的距离」两个信息。如果设两部分分别为<span class="math inline">\(c, d\)</span>，那么答案就是 <spanclass="math inline">\(c \times d_0 - d\)</span>，其中 <spanclass="math inline">\(d_0\)</span> 为当前点的坐标。</p><p>本题保证 <span class="math inline">\(x\)</span>两两不同，因此是最基础的二维偏序，无需在排序时分类。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> V views</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bit</span> &#123;</span><br><span class="line">    <span class="type">int</span>         n;</span><br><span class="line">    vector&lt;ll&gt; tr;</span><br><span class="line">    <span class="built_in">bit</span>(<span class="type">int</span> _n) : <span class="built_in">n</span>(_n), <span class="built_in">tr</span>(_n + <span class="number">1</span>, <span class="number">0</span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt;= n; i += i &amp; -i) &#123;</span><br><span class="line">            tr[i] += x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">qry</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        ll ans&#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (; i; i -= i &amp; -i) &#123;</span><br><span class="line">            ans += tr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector      <span class="title">a</span><span class="params">(n, pair&#123;<span class="number">0</span>, <span class="number">0</span>&#125;)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">        cin &gt;&gt; a[i].first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">        cin &gt;&gt; a[i].second;</span><br><span class="line">        v[i] = a[i].second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    R::<span class="built_in">sort</span>(a);</span><br><span class="line">    R::<span class="built_in">sort</span>(v);</span><br><span class="line">    v.<span class="built_in">resize</span>(<span class="built_in">unique</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()) - v.<span class="built_in">begin</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// count, distance</span></span><br><span class="line">    <span class="function">bit <span class="title">c</span><span class="params">(n)</span>, <span class="title">d</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">    ll ans&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">1</span> + R::<span class="built_in">lower_bound</span>(v, a[i].second) - v.<span class="built_in">begin</span>();</span><br><span class="line">        c.<span class="built_in">mdf</span>(l, <span class="number">1</span>);</span><br><span class="line">        d.<span class="built_in">mdf</span>(l, a[i].first);</span><br><span class="line">        ans += c.<span class="built_in">qry</span>(l) * a[i].first - d.<span class="built_in">qry</span>(l);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;数轴上有若干点，第 &lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt;
个点初始坐标为 &lt;span class=&quot;math inline&quot;&gt;\(x_i\)&lt;/span&gt;，速度为 &lt;span
class=&quot;math inline&quot;&gt;\(v_i\)&lt;/span&gt;。&lt;span
class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt; 时刻的坐标为 &lt;span
class=&quot;math inline&quot;&gt;\(x_i + t \times v_i\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;初始时坐标两两不同，问对于任意两个点任意时刻可能的最短距离 &lt;span
class=&quot;math inline&quot;&gt;\(d(i, j)\)&lt;/span&gt; 之和。即求&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
\sum_{1 \le i \lt j \le n}  d(i, j)
\]&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1311" scheme="https://tau.gay/cf/1311/"/>
    
    
    <category term="树状数组" scheme="https://tau.gay/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    <category term="二维偏序" scheme="https://tau.gay/tags/%E4%BA%8C%E7%BB%B4%E5%81%8F%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>CF1579E2</title>
    <link href="https://tau.gay/cf/1579/e2/"/>
    <id>https://tau.gay/cf/1579/e2/</id>
    <published>2022-08-20T02:36:39.000Z</published>
    <updated>2022-08-21T17:59:34.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>给定一个<font color="red">序</font>列 <spanclass="math inline">\(\{A\}_n\)</span>，按照顺序向双端队列的头或者尾插入元素，问能得到的<font color="red">逆序对数</font>最小的双端队列。</p><span id="more"></span><ul><li><span class="math inline">\(1 \le n \le 2 \times 10 ^5\)</span></li><li><span class="math inline">\(-10 ^ 9 \le a_i \le 10 ^ 9\)</span></li></ul><h2 id="解答">解答</h2><p>与 <a href="/cf/1579/e1/">/cf/1579/e1/</a>思路是类似的。</p><p>考虑到放头尾分别的贡献会对下一阶段的决策产生影响（逆序对数变了），但决策方式是一样的（新增的元素对逆序对数的影响仅限于原来的元素），即只需分别判定放头尾哪个更小。</p><p>元素很大，需要离散化。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tests;</span><br><span class="line">    cin &gt;&gt; tests;</span><br><span class="line">    <span class="keyword">while</span> (tests--) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector <span class="title">a</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 离散化超简洁写法</span></span><br><span class="line">        <span class="keyword">auto</span> b &#123;a&#125;;</span><br><span class="line">        R::<span class="built_in">sort</span>(b);</span><br><span class="line">        b.<span class="built_in">resize</span>(<span class="built_in">unique</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>()) - b.<span class="built_in">begin</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">bit</span> &#123;</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; tr;</span><br><span class="line">            <span class="built_in">bit</span>(<span class="type">int</span> _n) : <span class="built_in">n</span>(_n), <span class="built_in">tr</span>(_n + <span class="number">1</span>, <span class="number">0</span>)&#123;&#125;;</span><br><span class="line">            <span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (; i &lt;= n; i += i &amp; -i) &#123;</span><br><span class="line">                    tr[i] += x;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="type">int</span> <span class="title">qry</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">                <span class="type">int</span> ans&#123;&#125;;</span><br><span class="line">                <span class="keyword">for</span> (; i; i -= i &amp; -i) &#123;</span><br><span class="line">                    ans += tr[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="built_in">g</span>(b.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">        ll ans&#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">1</span> + R::<span class="built_in">lower_bound</span>(b, a[i]) - b.<span class="built_in">begin</span>();</span><br><span class="line">            g.<span class="built_in">mdf</span>(l, <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// [0, l), [l, m]</span></span><br><span class="line">            ans += <span class="built_in">min</span>(g.<span class="built_in">qry</span>(l - <span class="number">1</span>), g.<span class="built_in">qry</span>(b.<span class="built_in">size</span>()) - g.<span class="built_in">qry</span>(l));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给定一个&lt;font color=&quot;red&quot;&gt;序&lt;/font&gt;列 &lt;span
class=&quot;math inline&quot;&gt;\(\{A\}_n\)&lt;/span&gt;，按照顺序向双端队列的头或者尾插入元素，问能得到的&lt;font color=&quot;red&quot;&gt;逆序对数&lt;/font&gt;最小的双端队列。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1579" scheme="https://tau.gay/cf/1579/"/>
    
    
    <category term="树状数组" scheme="https://tau.gay/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    <category term="贪心" scheme="https://tau.gay/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>CF1579E1</title>
    <link href="https://tau.gay/cf/1579/e1/"/>
    <id>https://tau.gay/cf/1579/e1/</id>
    <published>2022-08-20T02:36:37.000Z</published>
    <updated>2022-08-21T17:59:34.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>给定一个排列 <spanclass="math inline">\(\{P\}_n\)</span>，按照顺序向双端队列的头或者尾插入元素，问能得到的字典序最小的双端队列。</p><span id="more"></span><h2 id="解答">解答</h2><p>用一个双端队列 <code>std::deque</code>模拟。如果当前的队首比新增加的元素大，就将元素插入队首；否则插入队尾。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tests;</span><br><span class="line">    cin &gt;&gt; tests;</span><br><span class="line">    <span class="keyword">while</span> (tests--) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        deque&lt;<span class="type">int</span>&gt; dq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x; <span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="keyword">if</span> (dq.<span class="built_in">empty</span>() || dq.<span class="built_in">front</span>() &lt; x) &#123;</span><br><span class="line">                dq.<span class="built_in">push_back</span>(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dq.<span class="built_in">front</span>() &gt; x) &#123;</span><br><span class="line">                dq.<span class="built_in">push_front</span>(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">            cout &lt;&lt; dq[i] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i + <span class="number">1</span> == n];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给定一个排列 &lt;span
class=&quot;math inline&quot;&gt;\(\{P\}_n\)&lt;/span&gt;，按照顺序向双端队列的头或者尾插入元素，问能得到的字典序最小的双端队列。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1579" scheme="https://tau.gay/cf/1579/"/>
    
    
    <category term="STL" scheme="https://tau.gay/tags/STL/"/>
    
    <category term="贪心" scheme="https://tau.gay/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>P1823</title>
    <link href="https://tau.gay/p/1823/"/>
    <id>https://tau.gay/p/1823/</id>
    <published>2022-08-18T21:51:00.000Z</published>
    <updated>2022-08-21T17:59:34.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>和 <a href="/cf/5/e/">CF5E</a> 十分类似，但没有「环」这一条件。</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P1823"class="uri">https://www.luogu.com.cn/problem/P1823</a></p><h2 id="解答">解答</h2><p>如果按照上面的做法尝试解决此题，会发现大多时候都数多了。TODO:2022-08-19 08:59:06 Patricky 原因未知。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>    top&#123;&#125;;</span><br><span class="line"><span class="function">vector <span class="title">stk</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">vector <span class="title">cnt</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">ll ans&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">    <span class="keyword">while</span> (top &amp;&amp; stk[top] &lt; a[i]) &#123;</span><br><span class="line">        ans += cnt[top--];</span><br><span class="line">    &#125;</span><br><span class="line">    ans += !!top;</span><br><span class="line">    <span class="keyword">if</span> (stk[top] != a[i]) &#123;</span><br><span class="line">        stk[++top] = a[i];</span><br><span class="line">        cnt[top]   = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans += cnt[top]++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记录下来相同元素的出现次数然后统计。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector <span class="title">a</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>    top&#123;&#125;;</span><br><span class="line">    <span class="comment">// 存储元素以及出现次数</span></span><br><span class="line">    <span class="function">vector <span class="title">stk</span><span class="params">(n + <span class="number">1</span>, array&lt;<span class="type">int</span>, <span class="number">2</span>&gt;&#123;&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">    ll    ans&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">        <span class="type">int</span> cnt&#123;&#125;;</span><br><span class="line">        <span class="keyword">while</span> (top &amp;&amp; stk[top][<span class="number">0</span>] &lt;= a[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stk[top][<span class="number">0</span>] == a[i]) &#123;</span><br><span class="line">                cnt = stk[top][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            ans += stk[top--][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 相邻元素</span></span><br><span class="line">        ans += !!top;</span><br><span class="line">        stk[++top] = &#123;a[i], cnt + <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;和 &lt;a href=&quot;/cf/5/e/&quot;&gt;CF5E&lt;/a&gt; 十分类似，但没有「环」这一条件。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="p" scheme="https://tau.gay/p/"/>
    
    <category term="luogu" scheme="https://tau.gay/luogu/"/>
    
    
    <category term="nge" scheme="https://tau.gay/tags/nge/"/>
    
    <category term="TODO" scheme="https://tau.gay/tags/TODO/"/>
    
  </entry>
  
  <entry>
    <title>CF5E</title>
    <link href="https://tau.gay/cf/5/e/"/>
    <id>https://tau.gay/cf/5/e/</id>
    <published>2022-08-18T17:11:21.000Z</published>
    <updated>2022-08-21T17:59:34.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>给定一个 <span class="math inline">\(n\)</span> 个点的环，计算对子<span class="math inline">\((i, j), i \ne j\)</span> 的数量。其中 <spanclass="math inline">\(i, j\)</span>相连的两条弧中任意一条没有比他们更高的点。</p><span id="more"></span><h2 id="解答">解答</h2><p>遇到环的第一想法应该是破环成链。题目希望两个点中间没有比他们高的点，最高的点一定是答案的一部分，因此不妨从这里破开。接着就可以考虑在链上怎么解决这个问题了。</p><p>连接任意两点，链不合法将会在中间某点断开，使得某段是合法的解。对于固定的右端点来说，这个断开的点是左边最近的、比他大的点。</p><p>这是单调栈的基本问题，即 <span class="math inline">\(\rmNGE\)</span>（Next Greater Element）。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector <span class="title">a</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> pos&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[pos]) &#123;</span><br><span class="line">            pos = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    R::<span class="built_in">rotate</span>(a, a.<span class="built_in">begin</span>() + pos);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ++top, top--, top 长度上完胜</span></span><br><span class="line">    <span class="comment">// push_back pop_back back</span></span><br><span class="line">    <span class="type">int</span> top&#123;&#125;;</span><br><span class="line">    <span class="function">vector <span class="title">stk</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector <span class="title">cnt</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>; <span class="comment">// 次数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// n - 1 对相邻</span></span><br><span class="line">    ll  ans&#123;n - <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">1</span>, n)) &#123; <span class="comment">// 枚举右端点</span></span><br><span class="line">        <span class="comment">// 匹配更大的左端点</span></span><br><span class="line">        <span class="keyword">while</span> (top &amp;&amp; stk[top] &lt; a[i]) &#123;</span><br><span class="line">            ans += cnt[top--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 严格高于 -- 要判重</span></span><br><span class="line">        <span class="keyword">if</span> (stk[top] != a[i]) &#123;</span><br><span class="line">            stk[++top] = a[i];</span><br><span class="line">            cnt[top]   = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += cnt[top]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后一次: 加入最大值</span></span><br><span class="line">    <span class="keyword">while</span> (top &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        ans += cnt[top--];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给定一个 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 个点的环，计算对子
&lt;span class=&quot;math inline&quot;&gt;\((i, j), i \ne j\)&lt;/span&gt; 的数量。其中 &lt;span
class=&quot;math inline&quot;&gt;\(i, j\)&lt;/span&gt;
相连的两条弧中任意一条没有比他们更高的点。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="5" scheme="https://tau.gay/cf/5/"/>
    
    
    <category term="nge" scheme="https://tau.gay/tags/nge/"/>
    
  </entry>
  
  <entry>
    <title>CF5D</title>
    <link href="https://tau.gay/cf/5/d/"/>
    <id>https://tau.gay/cf/5/d/</id>
    <published>2022-08-18T17:11:18.000Z</published>
    <updated>2022-08-21T17:59:34.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>车辆始终以 <span class="math inline">\(a\)</span>的加速度行驶，最大速度为 <spanclass="math inline">\(v\)</span>。路程总长 <spanclass="math inline">\(l\)</span>，在 <spanclass="math inline">\(d\)</span> 位置上有一个限速点，限制<b>该点速度</b> 为 <span class="math inline">\(w\)</span>。</p><p>求通过此路段的最短时间。</p><span id="more"></span><h2 id="解答">解答</h2><p>高中物理题。可以使用画图的方式便于理解，但总的来说需要考虑许多情况：</p><ol type="1"><li>一直加速，即使到达限速点，速度也依然在可控制的范围内。那么一直加速过去就可以了。</li><li>否则，需要在检查点之前减速到 <spanclass="math inline">\(w\)</span>。<ol type="1"><li>如果在此过程中甚至没有到最大速度（或瞬间开始减速），意味着关于速度的图像形如<span class="math inline">\(\boxed{\diagup\diagdown}\)</span>。</li><li>否则有一段以最大速度匀速行驶的阶段。即 <spanclass="math inline">\(\boxed{\diagup\overline{v \rightarrowv}\diagdown}\)</span>。</li></ol></li><li>最后一直加速到终点。</li></ol><p>🇨🇳 以上内容对于中国理科生来说十分容易，具体每一步的解析如下：</p><details><summary>讲解一：计算时间</summary><p>给定初速度 <span class="math inline">\(v_0\)</span>，限速 <spanclass="math inline">\(v_m\)</span>，加速度为 <spanclass="math inline">\(a\)</span>，走过 <spanclass="math inline">\(l\)</span> 长路的最短时间。</p><p>给定双点速度，使用 <span class="math inline">\(v_t^2 - v_0^2 =2ax\)</span> 来求得位移 <span class="math inline">\(x\)</span>。</p><p>若位移比 <span class="math inline">\(l\)</span>要大（或等），那么直接冲过去就好了。时间花费为方程 <spanclass="math inline">\(\dfrac{1}{2}at^2 + v_0t = l\)</span> 的实数解</p><p><span class="math display">\[\color{red}\boxed{\dfrac{-v_0 +\sqrt{v_0^2 + 2al}}{a}}\]</span></p><p>否则先加速到 <span class="math inline">\(v_m\)</span>随后一直匀速。即</p><p><span class="math display">\[\color{red}\boxed{t = \dfrac{v_m -v_0}{a} + \dfrac{l - x}{v_m}}\]</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> T = [&amp;](db v0, db vm, db a, db l) -&gt; db &#123;</span><br><span class="line">    <span class="keyword">if</span> (db x = (vm + v0) * (vm - v0) / (<span class="number">2</span> * a); x - l &gt; -epsilon) &#123;</span><br><span class="line">        <span class="built_in">return</span> (<span class="built_in">sqrt</span>(v0 * v0 + <span class="number">2</span> * a * l) - v0) / a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">return</span> (vm - v0) / a + (l - x) / vm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details><summary>讲解二：情形 2-1 的分界点</summary><p>设从速度 <span class="math inline">\(v_t\)</span>时开始减速。使用两次 <span class="math inline">\(v_t^2 - v_0^2 =2ax\)</span> 得：</p><p><span class="math display">\[\dfrac{v_t^2}{2a} + \dfrac{v_t^2 -w^2}{2a} = d\]</span></p><p>于是：</p><p><span class="math display">\[\color{red}\boxed{v_t = at_0 =\sqrt{\dfrac{2ad + w ^ 2}{2}}}\]</span></p><p>如果 <span class="math inline">\(v_t \lev\)</span>，说明中间不存在一段匀速行驶的路段，根据对称性，可得 <spanclass="math inline">\(t_1 = 2t_0 - \dfrac{w}{a}\)</span>。图像如下：</p><figure><img src="/img/5D.png"><figcaption align="center">对称性</figcaption></figure></details><hr/><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> db                    = <span class="type">double</span>;</span><br><span class="line"><span class="type">static</span> <span class="keyword">constexpr</span> db epsilon = <span class="number">1E-6</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line">    cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> T = [&amp;](db v0, db vm, db a, db l) -&gt; db &#123;</span><br><span class="line">        <span class="keyword">if</span> (db x = (vm + v0) * (vm - v0) / (<span class="number">2</span> * a); x - l &gt; -epsilon) &#123;</span><br><span class="line">            <span class="built_in">return</span> (<span class="built_in">sqrt</span>(v0 * v0 + <span class="number">2</span> * a * l) - v0) / a;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">return</span> (vm - v0) / a + (l - x) / vm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    db a, v, l, d, w;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; v &gt;&gt; l &gt;&gt; d &gt;&gt; w;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (db s = w * w / (<span class="number">2</span> * a); s - d &gt; -epsilon || w - v &gt; -epsilon) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">T</span>(<span class="number">0</span>, v, a, l) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        db t1&#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (db t0 = <span class="built_in">sqrt</span>((<span class="number">2</span> * a * d + w * w) / (<span class="number">2</span> * a * a)); t0 * a - v &lt; epsilon) &#123;</span><br><span class="line">            t1 = <span class="number">2</span> * t0 - w / a;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            db x1 = v * v / (<span class="number">2</span> * a);</span><br><span class="line">            db x2 = (v + w) * (v - w) / (<span class="number">2</span> * a);</span><br><span class="line">            t1    = v / a + (v - w) / a + (d - x1 - x2) / v;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; t1 + <span class="built_in">T</span>(w, v, a, l - d) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;车辆始终以 &lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt;
的加速度行驶，最大速度为 &lt;span
class=&quot;math inline&quot;&gt;\(v\)&lt;/span&gt;。路程总长 &lt;span
class=&quot;math inline&quot;&gt;\(l\)&lt;/span&gt;，在 &lt;span
class=&quot;math inline&quot;&gt;\(d\)&lt;/span&gt; 位置上有一个限速点，限制
&lt;b&gt;该点速度&lt;/b&gt; 为 &lt;span class=&quot;math inline&quot;&gt;\(w\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;求通过此路段的最短时间。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="5" scheme="https://tau.gay/cf/5/"/>
    
    
  </entry>
  
  <entry>
    <title>CF5C</title>
    <link href="https://tau.gay/cf/5/c/"/>
    <id>https://tau.gay/cf/5/c/</id>
    <published>2022-08-18T17:11:16.000Z</published>
    <updated>2022-08-21T17:59:34.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>计算出给定括号序列的最长合法括号序列长度以及数量。</p><span id="more"></span><p>特殊的，如果没有合法序列，输出 <spanclass="math inline">\(\verb|&quot;0 1&quot;|\)</span>。</p><h2 id="解答">解答</h2><p>用栈进行括号匹配，中途记下所有合法的位置。最后扫描一次，期间维护两个答案。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">    stk.<span class="built_in">reserve</span>(n);</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">vis</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="type">char</span> si&#123;s[i]&#125;; si == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            stk.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stk.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            vis[i] = vis[stk.<span class="built_in">back</span>()] = <span class="literal">true</span>;</span><br><span class="line">            stk.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> m&#123;&#125;, occur&#123;<span class="number">1</span>&#125;, cnt&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">        cnt = vis[i] ? cnt + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (m != <span class="number">0</span> &amp;&amp; cnt == m) &#123;</span><br><span class="line">            occur += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m &lt; cnt) &#123;</span><br><span class="line">            m     = cnt;</span><br><span class="line">            occur = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; m &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; occur &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;计算出给定括号序列的最长合法括号序列长度以及数量。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="5" scheme="https://tau.gay/cf/5/"/>
    
    
    <category term="括号序列" scheme="https://tau.gay/tags/%E6%8B%AC%E5%8F%B7%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>CF5B</title>
    <link href="https://tau.gay/cf/5/b/"/>
    <id>https://tau.gay/cf/5/b/</id>
    <published>2022-08-18T17:11:15.000Z</published>
    <updated>2022-08-21T17:59:34.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>将给定的若干字符串居中排版，如果无法完美居中。依次向左、向右微调一个字符。</p><span id="more"></span><h2 id="解答">解答</h2><p>记下最长的一行，随后需要记下来是第几次无法完美居中。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    string         s;</span><br><span class="line">    vector&lt;string&gt; x;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> m&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">getline</span>(cin, s)) &#123;</span><br><span class="line">        x.<span class="built_in">push_back</span>(s);</span><br><span class="line">        m = <span class="built_in">max</span>(m, s.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">string</span>(m + <span class="number">2</span>, <span class="string">&#x27;*&#x27;</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> occur = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (string&amp; si : x) &#123;</span><br><span class="line">        <span class="type">int</span> s = m - si.<span class="built_in">size</span>();</span><br><span class="line">        occur ^= s &amp; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> offset = occur * (s &amp; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">string</span>((s + offset) / <span class="number">2</span>, <span class="string">&#x27; &#x27;</span>) &lt;&lt; si &lt;&lt; <span class="built_in">string</span>((s + <span class="number">1</span> - offset) / <span class="number">2</span>, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;*\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">string</span>(m + <span class="number">2</span>, <span class="string">&#x27;*&#x27;</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;将给定的若干字符串居中排版，如果无法完美居中。依次向左、向右微调一个字符。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="5" scheme="https://tau.gay/cf/5/"/>
    
    
    <category term="STL" scheme="https://tau.gay/tags/STL/"/>
    
    <category term="模拟" scheme="https://tau.gay/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>CF5A</title>
    <link href="https://tau.gay/cf/5/a/"/>
    <id>https://tau.gay/cf/5/a/</id>
    <published>2022-08-18T17:11:13.000Z</published>
    <updated>2022-08-21T17:59:34.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>为聊天系统实现以下三个功能：</p><ol type="1"><li>添加用户</li><li>删除用户</li><li>向所有用户发送一条消息，这贡献用户数量 <spanclass="math inline">\(\times\)</span> 信息长度的流量。</li></ol><p>输出总流量。</p><span id="more"></span><h2 id="解答">解答</h2><p>因为数据保证不会添加已经添加过的用户、不会删除不存在的用户。只需要记下当前的用户总数。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    string s;</span><br><span class="line">    <span class="type">int</span> ans&#123;&#125;, online&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">getline</span>(cin, s)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">            online += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            online -= <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans += online * (s.<span class="built_in">size</span>() - s.<span class="built_in">find</span>(<span class="string">&quot;:&quot;</span>) - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;为聊天系统实现以下三个功能：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;添加用户&lt;/li&gt;
&lt;li&gt;删除用户&lt;/li&gt;
&lt;li&gt;向所有用户发送一条消息，这贡献用户数量 &lt;span
class=&quot;math inline&quot;&gt;\(\times\)&lt;/span&gt; 信息长度的流量。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;输出总流量。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="5" scheme="https://tau.gay/cf/5/"/>
    
    
    <category term="STL" scheme="https://tau.gay/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>CF4D</title>
    <link href="https://tau.gay/cf/4/d/"/>
    <id>https://tau.gay/cf/4/d/</id>
    <published>2022-08-17T07:53:07.000Z</published>
    <updated>2022-08-21T17:59:34.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>给定 <span class="math inline">\((w, h)\)</span> 与 <spanclass="math inline">\(n\)</span> 组 <span class="math inline">\((w_i,h_i)\)</span>。求出 <span class="math inline">\(w_i, h_i\)</span>都严格大于 <span class="math inline">\(w, h\)</span>的严格上升子序列、及其长度。</p><span id="more"></span><h2 id="解答">解答</h2><p>首先把那些比 <span class="math inline">\((w, h)\)</span>还要小的元素都筛掉，剩下的问题是一个<b>二维偏序</b>问题。<del>其实 <spanclass="math inline">\(\sout{\rm LIS}\)</span> 问题也就是 <spanclass="math inline">\(\sout{i \lt j \land a_i \lt a_j}\)</span>而已，只不过不能选择重复的点情况下第一维的限制很好满足罢了。</del></p><blockquote><p>处理二维偏序问题的核心思路是：<u style="text-decoration-style: wavy;">固定某一维，枚举另一维</u>。</p></blockquote><p>只不过大多时间都希望枚举的复杂度低一些。如果具有单调性，既可以直接二分，也可以在值域上开一个数状数组。</p><p>本题属于 <span class="math inline">\((h_i, w_i) \prec (h_j,w_j)\)</span> 且 <span class="math inline">\(h_i \lt h_j \land w_i \ltw_j\)</span> 且两维都可重的情况。需要对第二维进行逆序排序，随后执行<span class="math inline">\(\rm LIS\)</span> 的步骤。</p><p>另外，输出路径，需要记录当前最长子序列长度发生在哪一个位置。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> V views</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> w, h;</span><br><span class="line">    cin &gt;&gt; w &gt;&gt; h;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector <span class="title">a</span><span class="params">(<span class="number">0</span>, tuple&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;)</span></span>;</span><br><span class="line">    a.<span class="built_in">reserve</span>(n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">        <span class="type">int</span> wi, hi;</span><br><span class="line">        cin &gt;&gt; wi &gt;&gt; hi;</span><br><span class="line">        <span class="keyword">if</span> (wi &gt; w &amp;&amp; hi &gt; h) &#123;</span><br><span class="line">            a.<span class="built_in">emplace_back</span>(wi, hi, i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    R::<span class="built_in">sort</span>(a, [&amp;](<span class="keyword">auto</span> a, <span class="keyword">auto</span> b) &#123;</span><br><span class="line">        <span class="keyword">auto</span> [wa, ha, _a] = a;</span><br><span class="line">        <span class="keyword">auto</span> [wb, hb, _b] = b;</span><br><span class="line">        <span class="keyword">return</span> wa == wb ? ha &gt; hb : wa &lt; wb;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    n = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="number">1E9</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">        <span class="keyword">auto</span> pos = <span class="built_in">lower_bound</span>(dp.<span class="built_in">begin</span>(), dp.<span class="built_in">begin</span>() + top + <span class="number">1</span>, <span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(a[i]));</span><br><span class="line">        top      = <span class="built_in">max</span>(top, f[i] = pos - dp.<span class="built_in">begin</span>());</span><br><span class="line">        *pos     = <span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector <span class="title">ans</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    ans.<span class="built_in">reserve</span>(n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 倒着跑</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n) | V::reverse) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f[i] == top) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(a[i]));</span><br><span class="line">            top -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    R::<span class="built_in">copy</span>(ans | V::reverse, ostream_iterator&lt;<span class="type">int</span>&gt;&#123;cout, <span class="string">&quot; &quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给定 &lt;span class=&quot;math inline&quot;&gt;\((w, h)\)&lt;/span&gt; 与 &lt;span
class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 组 &lt;span class=&quot;math inline&quot;&gt;\((w_i,
h_i)\)&lt;/span&gt;。求出 &lt;span class=&quot;math inline&quot;&gt;\(w_i, h_i\)&lt;/span&gt;
都严格大于 &lt;span class=&quot;math inline&quot;&gt;\(w, h\)&lt;/span&gt;
的严格上升子序列、及其长度。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="4" scheme="https://tau.gay/cf/4/"/>
    
    
    <category term="二维偏序" scheme="https://tau.gay/tags/%E4%BA%8C%E7%BB%B4%E5%81%8F%E5%BA%8F/"/>
    
    <category term="dp" scheme="https://tau.gay/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>CF4C</title>
    <link href="https://tau.gay/cf/4/c/"/>
    <id>https://tau.gay/cf/4/c/</id>
    <published>2022-08-17T07:53:05.000Z</published>
    <updated>2022-08-21T17:59:34.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>给定若干用户名，如果该用户名并非首次出现，追加数字标记。否则输出OK.</p><span id="more"></span><h2 id="解答">解答</h2><p>记下出现次数。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    map&lt;string, <span class="type">int</span>&gt; occurrence;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        string x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        occurrence[x] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (occurrence[x] == <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;OK\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; x &lt;&lt; occurrence[x] - <span class="number">1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给定若干用户名，如果该用户名并非首次出现，追加数字标记。否则输出
OK.&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="4" scheme="https://tau.gay/cf/4/"/>
    
    
    <category term="STL" scheme="https://tau.gay/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>CF4B</title>
    <link href="https://tau.gay/cf/4/b/"/>
    <id>https://tau.gay/cf/4/b/</id>
    <published>2022-08-17T07:53:04.000Z</published>
    <updated>2022-08-21T17:59:34.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>给定总时间，是否能造一张复习计划表，使得每一天的学习时间都由一个区间限制。</p><span id="more"></span><h2 id="解答">解答</h2><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, s;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; s;</span><br><span class="line">  </span><br><span class="line">    ll a&#123;&#125;, b&#123;&#125;;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">x</span><span class="params">(n)</span>, <span class="title">y</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">        cin &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">        a += x[i];</span><br><span class="line">        b += y[i];</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (s &gt; b || s &lt; a) &#123;</span><br><span class="line">        <span class="keyword">return</span> cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>, <span class="type">int</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">    s -= a;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; s &amp;&amp; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="type">int</span> delta = y[i] - x[i]; s &gt; delta) &#123;</span><br><span class="line">            s -= delta;</span><br><span class="line">            x[i] = y[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            x[i] += s;</span><br><span class="line">            s = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    R::<span class="built_in">copy</span>(x, <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给定总时间，是否能造一张复习计划表，使得每一天的学习时间都由一个区间限制。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="4" scheme="https://tau.gay/cf/4/"/>
    
    
  </entry>
  
  <entry>
    <title>CF4A</title>
    <link href="https://tau.gay/cf/4/a/"/>
    <id>https://tau.gay/cf/4/a/</id>
    <published>2022-08-17T07:53:02.000Z</published>
    <updated>2022-08-24T16:41:54.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>能否把 🍉 分成两个正偶数？</p><span id="more"></span><h2 id="解答">解答</h2><p>当且仅当 <span class="math inline">\(2 \mid\)</span> 🍉 且 🍉 <spanclass="math inline">\(\ge 4\)</span>。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; (x % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; x &gt;= <span class="number">4</span> ? <span class="string">&quot;YES\n&quot;</span> : <span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;能否把 🍉 分成两个正偶数？&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="4" scheme="https://tau.gay/cf/4/"/>
    
    
  </entry>
  
  <entry>
    <title>CF3D</title>
    <link href="https://tau.gay/cf/3/d/"/>
    <id>https://tau.gay/cf/3/d/</id>
    <published>2022-08-17T04:15:32.000Z</published>
    <updated>2022-08-21T17:59:34.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>给定一个带问号的括号序列，将每个问号替换成左括号或右括号对应着不同的代价。问得到合法括号序列的最小代价。</p><p>或报告不可能。</p><span id="more"></span><h2 id="解答">解答</h2><p>不妨率先安排所有括号，将 <spanclass="math inline">\(\verb|open|\)</span> 记为 <spanclass="math inline">\(+\)</span>，<spanclass="math inline">\(\verb|close|\)</span> 记为 <spanclass="math inline">\(-\)</span>。</p><p>要使总代价最小，必然每个部分的代价都最小。当然前提是能够成功使得括号序列匹配。</p><p>从左向右扫描，记录当前括号的匹配情况，如果遇到右括号多于左括号，选择一个修改代价最小的进行修改。即<span class="math inline">\(\verb|open| - \verb|close|\)</span>最小的项，随后此项不再被考虑，因此整个过程应当使用堆来维护。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> open &#123;&#125;;</span><br><span class="line">    ll ans &#123;&#125;;</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            open += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            open -= <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> l, r;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            q.<span class="built_in">emplace</span>(-l + r, i);</span><br><span class="line">            ans += r;</span><br><span class="line"></span><br><span class="line">            s[i] = <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            open -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (open &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> [c, i] = q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            ans -= c;</span><br><span class="line">            s[i] = <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">            open += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (open) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; s &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给定一个带问号的括号序列，将每个问号替换成左括号或右括号对应着不同的代价。问得到合法括号序列的最小代价。&lt;/p&gt;
&lt;p&gt;或报告不可能。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="3" scheme="https://tau.gay/cf/3/"/>
    
    
    <category term="贪心" scheme="https://tau.gay/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>CF3C</title>
    <link href="https://tau.gay/cf/3/c/"/>
    <id>https://tau.gay/cf/3/c/</id>
    <published>2022-08-17T04:15:30.000Z</published>
    <updated>2022-08-21T17:59:34.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>判定给定的井字棋局属于何种局面。</p><span id="more"></span><h2 id="解答">解答</h2><p>需要稍微分类讨论一下：</p><ol type="1"><li>平局：两者落子数和为 <span class="math inline">\(9\)</span>。</li><li><span class="math inline">\(A/B\)</span> 胜：三连珠。</li><li>该 <span class="math inline">\(A\)</span>落子：两者棋子数量相同。</li><li>该 <span class="math inline">\(B\)</span> 落子：<spanclass="math inline">\(A\)</span> 棋子多一颗。</li><li>非法：<ol type="1"><li>两者皆赢。</li><li><span class="math inline">\(A\)</span> 落子数量太少</li><li><span class="math inline">\(A\)</span> 落子数量太多</li><li><span class="math inline">\(A\)</span> 赢了但 <spanclass="math inline">\(B\)</span> 下了更多的棋</li><li><span class="math inline">\(B\)</span> 赢了但 <spanclass="math inline">\(A\)</span> 下了更多的棋</li></ol></li></ol><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">s</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> c1 &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (string &amp;x: s) &#123;</span><br><span class="line">        c1 += ranges::<span class="built_in">count</span>(x, <span class="string">&#x27;X&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> c2 &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (string &amp;x: s) &#123;</span><br><span class="line">        c2 += ranges::<span class="built_in">count</span>(x, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> get = [&amp;](<span class="type">char</span> ch) -&gt; <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="type">bool</span> win = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">            <span class="comment">// 横</span></span><br><span class="line">            win |= s[i] == <span class="built_in">string</span>(<span class="number">3</span>, ch);</span><br><span class="line">            <span class="type">bool</span> col = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 纵</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">                col &amp;= s[j][i] == ch;</span><br><span class="line">            &#125;</span><br><span class="line">            win |= col;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">1</span>][<span class="number">1</span>] == ch &amp;&amp; (</span><br><span class="line">                <span class="comment">// 主对角线</span></span><br><span class="line">                (s[<span class="number">0</span>][<span class="number">0</span>] == s[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; s[<span class="number">0</span>][<span class="number">0</span>] == s[<span class="number">2</span>][<span class="number">2</span>]) ||</span><br><span class="line">                <span class="comment">// 副对角线</span></span><br><span class="line">                (s[<span class="number">0</span>][<span class="number">2</span>] == s[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; s[<span class="number">0</span>][<span class="number">2</span>] == s[<span class="number">2</span>][<span class="number">0</span>])</span><br><span class="line">            )) &#123;</span><br><span class="line">            win = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> win;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> win = <span class="built_in">get</span>(<span class="string">&#x27;X&#x27;</span>), loz = <span class="built_in">get</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c1 &lt; c2 || <span class="comment">// A 落子数量少</span></span><br><span class="line">        c1 &gt; c2 + <span class="number">1</span> || <span class="comment">// A 落子数量多</span></span><br><span class="line">        (win &amp;&amp; loz) || <span class="comment">// win-win</span></span><br><span class="line">        (loz &amp;&amp; (c1 == c2 + <span class="number">1</span>)) || <span class="comment">// 惜败但脏棋</span></span><br><span class="line">        (win &amp;&amp; (c1 == c2))) &#123; <span class="comment">// 豪胜但被脏</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;illegal\n&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (win) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;the first player won\n&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loz) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;the second player won\n&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c1 + c2 == <span class="number">9</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;draw\n&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c1 == c2) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;first\n&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;second\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;判定给定的井字棋局属于何种局面。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="3" scheme="https://tau.gay/cf/3/"/>
    
    
    <category term="模拟" scheme="https://tau.gay/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>CF1719E</title>
    <link href="https://tau.gay/cf/1719/e/"/>
    <id>https://tau.gay/cf/1719/e/</id>
    <published>2022-08-17T01:04:36.000Z</published>
    <updated>2022-08-21T17:59:34.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>给定若干字符各 <span class="math inline">\(c_i\)</span>个，问能否将其排为一串字符，使得每个块内出现的字符数量连缀起来恰为一个斐波那契数列（<spanclass="math inline">\(1, 1, 2, 3, \cdots\)</span> ）。</p><span id="more"></span><p>如 <span class="math inline">\(``abaabbbccccc&quot;\)</span> 恰好为<span class="math inline">\(\{1, 1, 2, 3, 5\}\)</span>是一个斐波那契数列。</p><ul><li><span class="math inline">\(1 \le k \le 100, 1 \le c_i \le10^9\)</span></li></ul><h2 id="解答">解答</h2><p>首先可知 <span class="math inline">\(\sum \{C\}\)</span> 必定是某个<span class="math inline">\(\{\sum\operatorname{fibonacci}\}_i\)</span>。同时，<u style="text-decoration-style:wavy;">连续的划分不能是同一个字符</u>。</p><blockquote><p>如 <span class="math inline">\(aabbccc\)</span> 是 <spanclass="math inline">\(\{2, 2, 3\}\)</span>。</p></blockquote><p>倒着考虑。尽管更大的数字有着更多的「选择」，但如果不在正确的位置则一定不行。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    ll fibonacci[<span class="number">66</span>], f1 &#123; <span class="number">0</span> &#125;, f2 &#123; <span class="number">1</span> &#125;, sum &#123;&#125;;</span><br><span class="line">    map&lt;ll, <span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">66</span>; ++i) &#123;</span><br><span class="line">        s[sum += (fibonacci[i] = f2)] = i;</span><br><span class="line">        <span class="built_in">tie</span>(f1, f2) = tuple &#123; f2, f1 + f2 &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tests;</span><br><span class="line">    cin &gt;&gt; tests;</span><br><span class="line">    <span class="keyword">while</span> (tests--) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="function">vector&lt;ll&gt; <span class="title">c</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i: <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">            cin &gt;&gt; c[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ll sum = <span class="built_in">accumulate</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>(), <span class="number">0</span> LL);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!s.<span class="built_in">count</span>(sum)) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = s[sum], l &#123; <span class="number">-1</span> &#125;; ~i; --i) &#123;</span><br><span class="line">            <span class="type">int</span> p &#123; <span class="number">-1</span> &#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j: <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">                <span class="comment">//   不与上次的重复</span></span><br><span class="line">                <span class="comment">// 且还有充足的字符</span></span><br><span class="line">                <span class="comment">// 且从未选过或者有更大的选择</span></span><br><span class="line">                <span class="keyword">if</span> (j != l &amp;&amp; c[j] &gt;= fibonacci[i] &amp;&amp; (!~p || c[j] &gt; c[p])) &#123;</span><br><span class="line">                    p = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 查无此项 G!</span></span><br><span class="line">            <span class="keyword">if</span> (!~p) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">                <span class="keyword">goto</span> G;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            l = p;</span><br><span class="line">            c[p] -= fibonacci[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        G: ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给定若干字符各 &lt;span class=&quot;math inline&quot;&gt;\(c_i\)&lt;/span&gt;
个，问能否将其排为一串字符，使得每个块内出现的字符数量连缀起来恰为一个斐波那契数列（&lt;span
class=&quot;math inline&quot;&gt;\(1, 1, 2, 3, \cdots\)&lt;/span&gt; ）。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1719" scheme="https://tau.gay/cf/1719/"/>
    
    
    <category term="贪心" scheme="https://tau.gay/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>CF1719D1</title>
    <link href="https://tau.gay/cf/1719/d1/"/>
    <id>https://tau.gay/cf/1719/d1/</id>
    <published>2022-08-17T01:04:31.000Z</published>
    <updated>2022-08-21T17:59:34.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>是 <a href="/cf/1719/d2/">CF1719D2</a> 的简单版。</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;是 &lt;a href=&quot;/cf/1719/d2/&quot;&gt;CF1719D2&lt;/a&gt; 的简单版。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1719" scheme="https://tau.gay/cf/1719/"/>
    
    
  </entry>
  
  <entry>
    <title>CF1719D2</title>
    <link href="https://tau.gay/cf/1719/d2/"/>
    <id>https://tau.gay/cf/1719/d2/</id>
    <published>2022-08-17T01:04:30.000Z</published>
    <updated>2022-08-21T17:59:34.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>在数组 <span class="math inline">\(\{A\}\)</span> 上选定区间 <spanclass="math inline">\([L, R]\)</span> 以及数 <spanclass="math inline">\(x\)</span>，花费 <spanclass="math inline">\(\Big\lceil\dfrac{R - L + 1}{2}\Big\rceil\)</span>将区间中所有数都异或上 <spanclass="math inline">\(x\)</span>。问至少多少次操作后置空 <spanclass="math inline">\(\{A\}\)</span>？</p><span id="more"></span><ul><li><span class="math inline">\(a_i \in [0, 2 ^ {30})\)</span></li></ul><h2 id="解答">解答</h2><p>这种花费与区间长度相关的操作一般来说都可以看作若干长度为 <spanclass="math inline">\(1/2\)</span> 的区间，反之亦然。</p><p>可能使操作次数更少的情形出现在区间异或起来已经是 <spanclass="math inline">\(0\)</span> 的情况。 分两种情况：</p><ol type="1"><li>两个相同的数字，这样需要 <span class="math inline">\(1\)</span>的花费。否则总是若干这样的区间。</li><li>若干不同的数字，从头到尾成对异或起来可以节省 <spanclass="math inline">\(1\)</span> 的花费。</li></ol><p>总结两种操作都是能够将花费转变为 <spanclass="math inline">\(\operatorname{len} - 1\)</span>的代价。而核心是，找到一段异或和为 <spanclass="math inline">\(0\)</span>的区间，这个可以使用异或前缀和搞定。</p><p>设 <span class="math inline">\(f_i\)</span>为将前缀置空的最小花费，要么将某个数异或自己，要么已经找到一段区间其异或和为<span class="math inline">\(0\)</span>。</p><p><span class="math inline">\(f_i = \min\left\{f_{i - 1} + 1, dp_j +\operatorname{len}(j + 1, i)\right\}\)</span> 其中 <spanclass="math inline">\(\bigoplus\limits_{x = j + 1}^i a_x =0\)</span>。</p><p>为方便转移，对于每个前缀异或和 <spanclass="math inline">\(p_i\)</span> 记下 <spanclass="math inline">\(h_{p_i} := f_i - i\)</span>，这样就可以单次在<span class="math inline">\(\mathcal O(\log n)\)</span> 转移。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> tests;</span><br><span class="line">    cin &gt;&gt; tests;</span><br><span class="line">    <span class="keyword">while</span> (tests--) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span>, <span class="title">p</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i: <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">            p[i + <span class="number">1</span>] = p[i] ^ a[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n + <span class="number">1</span>, INT_MAX)</span></span>;</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; h;</span><br><span class="line">        h[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// f_i - i</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i: <span class="built_in">RI</span>(<span class="number">1</span>, n + <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="comment">// 把某个数改掉</span></span><br><span class="line">            f[i] = <span class="built_in">min</span>(f[i], f[i - <span class="number">1</span>] + !!a[i - <span class="number">1</span>]);</span><br><span class="line">            <span class="comment">// 区间和为 0</span></span><br><span class="line">            <span class="keyword">if</span> (h.<span class="built_in">count</span>(p[i])) &#123;</span><br><span class="line">                f[i] = <span class="built_in">min</span>(f[i], h[p[i]] + i - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            h[p[i]] = <span class="built_in">min</span>(h[p[i]], f[i] - i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; f.<span class="built_in">back</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="对称问题">对称问题</h2><p>直接思考「能节省的代价」也不错，思路与上述类似，但实现起来更轻巧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">1</span>, n + <span class="number">1</span>)) &#123;</span><br><span class="line">    f[i] = f[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (h.<span class="built_in">count</span>(p[i])) &#123;</span><br><span class="line">        dp[i] = <span class="built_in">max</span>(dp[i], <span class="number">1</span> + dp[h[p[i]]]);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 最后一次出现位置</span></span><br><span class="line">    h[p[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; n - f.<span class="built_in">back</span>(n) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;在数组 &lt;span class=&quot;math inline&quot;&gt;\(\{A\}\)&lt;/span&gt; 上选定区间 &lt;span
class=&quot;math inline&quot;&gt;\([L, R]\)&lt;/span&gt; 以及数 &lt;span
class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;，花费 &lt;span
class=&quot;math inline&quot;&gt;\(\Big\lceil\dfrac{R - L + 1}{2}\Big\rceil\)&lt;/span&gt;
将区间中所有数都异或上 &lt;span
class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;。问至少多少次操作后置空 &lt;span
class=&quot;math inline&quot;&gt;\(\{A\}\)&lt;/span&gt;？&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1719" scheme="https://tau.gay/cf/1719/"/>
    
    
    <category term="dp" scheme="https://tau.gay/tags/dp/"/>
    
    <category term="异或" scheme="https://tau.gay/tags/%E5%BC%82%E6%88%96/"/>
    
    <category term="前缀和" scheme="https://tau.gay/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>CF1719C</title>
    <link href="https://tau.gay/cf/1719/c/"/>
    <id>https://tau.gay/cf/1719/c/</id>
    <published>2022-08-17T01:04:27.000Z</published>
    <updated>2022-08-21T17:59:34.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p><span class="math inline">\(n\)</span>人比赛，战力<b>两两不同</b>。每次从头选择两选手，赢家留在头，输者置于尾。问若干轮后某选手赢了多少局。</p><span id="more"></span><h2 id="解答">解答</h2><p>事实上，经过 <span class="math inline">\(n\)</span>局之后，战力最高选手就会一直驻留队首了。后面的选手胜场不会增加，因此使用双端队列模拟这个过程，记录每次的胜者的空间开销也仅为<span class="math inline">\(\mathcal O(n)\)</span>。</p><p>复杂度为 <span class="math inline">\(\mathcal O(n + q \logn)\)</span>。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> tests;</span><br><span class="line">    cin &gt;&gt; tests;</span><br><span class="line">    <span class="keyword">while</span> (tests--) &#123;</span><br><span class="line">        <span class="type">int</span> n, q;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">        <span class="type">int</span> maxpos = <span class="number">-1</span>;</span><br><span class="line">        <span class="function">deque <span class="title">a</span><span class="params">(n, pair&#123;<span class="number">0</span>, <span class="number">0</span>&#125;)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i: <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">            cin &gt;&gt; a[i].first;</span><br><span class="line">            <span class="keyword">if</span> (a[i].first == n) &#123;</span><br><span class="line">                maxpos = i;</span><br><span class="line">            &#125;</span><br><span class="line">            a[i].second = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector <span class="title">b</span><span class="params">(n, vector&lt;<span class="type">int</span>&gt;&#123;&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i: <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">            <span class="keyword">auto</span> p1 = a.<span class="built_in">front</span>();</span><br><span class="line">            a.<span class="built_in">pop_front</span>();</span><br><span class="line">            <span class="keyword">auto</span> p2 = a.<span class="built_in">front</span>();</span><br><span class="line">            a.<span class="built_in">pop_front</span>();</span><br><span class="line">            a.<span class="built_in">push_front</span>(<span class="built_in">max</span>(p1, p2));</span><br><span class="line">            a.<span class="built_in">push_back</span>(<span class="built_in">min</span>(p1, p2));</span><br><span class="line">            b[<span class="built_in">max</span>(p1, p2).second].<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            <span class="type">int</span> i, k;</span><br><span class="line">            cin &gt;&gt; i &gt;&gt; k;</span><br><span class="line">            i -= <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> pos = ranges::<span class="built_in">upper_bound</span>(b[i], k - <span class="number">1</span>) - b[i].<span class="built_in">begin</span>();</span><br><span class="line">            cout &lt;&lt; pos + (k &gt; n &amp;&amp; i == maxpos ? k - n : <span class="number">0</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;
人比赛，战力&lt;b&gt;两两不同&lt;/b&gt;。每次从头选择两选手，赢家留在头，输者置于尾。问若干轮后某选手赢了多少局。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1719" scheme="https://tau.gay/cf/1719/"/>
    
    
    <category term="STL" scheme="https://tau.gay/tags/STL/"/>
    
    <category term="二分" scheme="https://tau.gay/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>CF1719B</title>
    <link href="https://tau.gay/cf/1719/b/"/>
    <id>https://tau.gay/cf/1719/b/</id>
    <published>2022-08-17T01:04:25.000Z</published>
    <updated>2022-08-21T17:59:34.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>给定 <span class="math inline">\(k\)</span>，将 <spanclass="math inline">\(1 \sim n\)</span> 的数分为 <spanclass="math inline">\(n / 2\)</span> 个二元组 <spanclass="math inline">\((a, b)\)</span>，使得 <spanclass="math inline">\(4 \mid (a + k) \times b\)</span>。</p><p>或报告不可能。</p><span id="more"></span><h2 id="解答">解答</h2><ul><li><span class="math inline">\(2 \times 2 = 1 \times 4 = 4 \times 1 =4\)</span></li></ul><p>如果 <span class="math inline">\(k \equiv 1 \pmod 2\)</span> 可以在<span class="math inline">\((a + k)\)</span> 与 <spanclass="math inline">\(b\)</span> 各给出 <spanclass="math inline">\(2\)</span> 因子的贡献，这样就总有 <spanclass="math inline">\(4 \mid (a + k) \times b\)</span> 了。</p><p>否则，如果 <span class="math inline">\(4 \mid k\)</span>，考虑到<span class="math inline">\(k / 4\)</span> 个二元组 <spanclass="math inline">\((4x, 2n + 1)\)</span> 可以配对，接下来至多凑出<span class="math inline">\(k / 8\)</span> 个 <spanclass="math inline">\(2 \times 2\)</span> 的二元组。于是这种情况下凑不出 <span class="math inline">\(k / 2\)</span> 对。</p><p>而对于 <span class="math inline">\(k \equiv 2 \pmod4\)</span>，则可以用 <span class="math inline">\(k / 4\)</span> 个 <spanclass="math inline">\(4n + 2\)</span> 凑出 <spanclass="math inline">\(4\)</span>，并且有 <span class="math inline">\(k /4\)</span> 个 <span class="math inline">\(4n\)</span>。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> tests;</span><br><span class="line">    cin &gt;&gt; tests;</span><br><span class="line">    <span class="keyword">while</span> (tests--) &#123;</span><br><span class="line">        <span class="type">int</span> n, k;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">if</span> (k % <span class="number">4</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i += <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// k 是奇数 或者 i = 4n + 2</span></span><br><span class="line">                <span class="keyword">if</span> ((k &amp; <span class="number">1</span>) || (~(i &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">                    cout &lt;&lt; i - <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i - <span class="number">1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给定 &lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt;，将 &lt;span
class=&quot;math inline&quot;&gt;\(1 \sim n\)&lt;/span&gt; 的数分为 &lt;span
class=&quot;math inline&quot;&gt;\(n / 2\)&lt;/span&gt; 个二元组 &lt;span
class=&quot;math inline&quot;&gt;\((a, b)\)&lt;/span&gt;，使得 &lt;span
class=&quot;math inline&quot;&gt;\(4 \mid (a + k) \times b\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;或报告不可能。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1719" scheme="https://tau.gay/cf/1719/"/>
    
    
    <category term="构造" scheme="https://tau.gay/tags/%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>CF1719A</title>
    <link href="https://tau.gay/cf/1719/a/"/>
    <id>https://tau.gay/cf/1719/a/</id>
    <published>2022-08-17T01:04:23.000Z</published>
    <updated>2022-08-20T05:20:26.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>棋盘上博弈，每次只能向上、向右移动<b>奇数次</b>。谁胜？</p><span id="more"></span><h2 id="解答">解答</h2><p>到达终点花费 <span class="math inline">\(n + m\)</span> 步。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> tests;</span><br><span class="line">    cin &gt;&gt; tests;</span><br><span class="line">    <span class="keyword">while</span> (tests--) &#123;</span><br><span class="line">        <span class="type">int</span> n, m;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        cout &lt;&lt; (n + m &amp; <span class="number">1</span> ? <span class="string">&quot;Burenka\n&quot;</span> : <span class="string">&quot;Tonya\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;棋盘上博弈，每次只能向上、向右移动&lt;b&gt;奇数次&lt;/b&gt;。谁胜？&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1719" scheme="https://tau.gay/cf/1719/"/>
    
    
    <category term="博弈" scheme="https://tau.gay/tags/%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
  <entry>
    <title>EC2017-XiAn-G</title>
    <link href="https://tau.gay/ec/2017/xian/g/"/>
    <id>https://tau.gay/ec/2017/xian/g/</id>
    <published>2022-08-15T09:45:00.000Z</published>
    <updated>2022-08-21T17:59:34.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>多次询问某区间内所有区间的异或和。</p><span id="more"></span><ul><li><span class="math inline">\(0 \le A_i \le 10 ^ 6\)</span></li><li><span class="math inline">\(1 \le n, q \le 10 ^ 5\)</span></li></ul><p><a href="https://nanti.jisuanke.com/t/A1613"class="uri">https://nanti.jisuanke.com/t/A1613</a></p><h2 id="用前缀和解答">用前缀和解答</h2><p>按位考虑，对于每一位来说，其贡献 <spanclass="math inline">\(s_i\)</span> 为 <spanclass="math inline">\(1\)</span>的位。于是答案为「前缀异或和数组中两两异或再求和的值」，也就是只有 <spanclass="math inline">\(01\)</span> 之间才有贡献，于是每一段的贡献为：</p><p><span class="math display">\[2^i \times \operatorname{cnt}_1 \times \operatorname{cnt}_0\]</span></p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>; <span class="comment">// &lt;+&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">10</span> + <span class="number">100000</span>,</span><br><span class="line">    bits = <span class="number">21</span>,</span><br><span class="line">    mod = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> s[bits][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>) -&gt; <span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tests;</span><br><span class="line">    std::cin &gt;&gt; tests;</span><br><span class="line">    <span class="keyword">while</span> (tests--) &#123;</span><br><span class="line">        <span class="type">int</span> n, q;</span><br><span class="line">        std::cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; ++i) &#123;</span><br><span class="line">            std::cin &gt;&gt; x;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; bits; ++j) &#123;</span><br><span class="line">                s[j][i] = s[j][i - <span class="number">1</span>] ^ (x &gt;&gt; j &amp; <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; bits; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                s[j][i] += s[j][i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            <span class="type">int</span> l, r;</span><br><span class="line">            std::cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            l -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            ll ans &#123;&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; bits; ++j) &#123;</span><br><span class="line">                <span class="type">int</span> o = s[j][r] - s[j][l - <span class="number">1</span>], z = (r - l + <span class="number">1</span>) - o;</span><br><span class="line">                ans = (ans + <span class="number">1</span> LL * o * z % mod * (<span class="number">1</span> LL &lt;&lt; j) % mod) % mod;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            std::cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;多次询问某区间内所有区间的异或和。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="ec" scheme="https://tau.gay/ec/"/>
    
    
    <category term="异或" scheme="https://tau.gay/tags/%E5%BC%82%E6%88%96/"/>
    
    <category term="前缀和" scheme="https://tau.gay/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>VJ1194</title>
    <link href="https://tau.gay/vj/1194/"/>
    <id>https://tau.gay/vj/1194/</id>
    <published>2022-08-15T03:40:02.000Z</published>
    <updated>2022-08-24T16:42:50.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>用 <span class="math inline">\(1 \times 2\)</span> 的骨牌填满 <spanclass="math inline">\(M \times N\)</span> 的矩阵方案数，其中 <spanclass="math inline">\(M \le 5.\)</span></p><span id="more"></span><ul><li><span class="math inline">\(N \in [1, 10 ^ 9]\)</span></li></ul><p><a href="https://vijos.org/p/1194"class="uri">https://vijos.org/p/1194</a></p><h2 id="解答1">解答<a href="#fn1" class="footnote-ref" id="fnref1"role="doc-noteref"><sup>1</sup></a></h2><p>假设已经放置了若干（或无）骨牌，从 <spanclass="math inline">\(M\)</span> 这一维来考虑，这些骨牌的摆放方式可能有<span class="math inline">\(2 ^ M\)</span>种。再加入若干牌，这一行有可能被填满吗？</p><p>用 <span class="math inline">\(i, j\)</span>表示当前行状态和可达的下行状态。有两条限制：</p><ol type="1"><li><span class="math inline">\(i \operatorname{or} j = 2 ^ M-1.\)</span></li><li><span class="math inline">\(i \&amp; j\)</span> 为若干（或无）<spanclass="math inline">\(1 \times 2\)</span> 骨牌。具体来说：</li></ol><p><span class="math display">\[i \&amp; j \in \rm\{ 0B00000, 0B00011, 0B00110, 0B01100, 0B01111,0B11000, 0B11011, 0B11110 \}\]</span></p><p>最终希望每行都转化为全 <spanclass="math inline">\(1\)</span>，这实际上是在求从 <spanclass="math inline">\(\verb|1..11|\)</span> 到 <spanclass="math inline">\(\verb|1..11|\)</span> 恰好经过 <spanclass="math inline">\(N\)</span>步的路径数量。于是，原问题转化为一个经典的问题：</p><blockquote><p><span class="math inline">\(\bm{Floyd}\)</span> 算法中的邻接矩阵自乘<span class="math inline">\(k\)</span> 次意义为「从 <spanclass="math inline">\(i\)</span> 到 <spanclass="math inline">\(j\)</span> 走 <spanclass="math inline">\(k\)</span>步<u style="text-decoration-style:wavy;">可达路径数量</u>」。</p></blockquote><p>使用矩阵乘法即可解决此问题。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>; <span class="comment">// &lt;+&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Matrix = std::array&lt;std::array&lt;ll, <span class="number">1</span> &lt;&lt; <span class="number">5</span>&gt;, <span class="number">1</span> &lt;&lt; <span class="number">5</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> limit, mod;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="keyword">operator</span> *= (Matrix &amp; a, <span class="type">const</span> Matrix &amp; b) &#123;</span><br><span class="line">    Matrix c &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; limit; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; limit; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; limit; ++k) &#123;</span><br><span class="line">                c[i][j] = (c[i][j] + a[i][k] * b[k][j] % mod) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>) -&gt; <span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m &gt;&gt; mod;</span><br><span class="line"></span><br><span class="line">    limit = <span class="number">1</span> &lt;&lt; m;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> s[] &#123; <span class="number">0B</span>00000, <span class="number">0B</span>00011, <span class="number">0B</span>00110, <span class="number">0B</span>01100, <span class="number">0B</span>01111, <span class="number">0B</span>11000, <span class="number">0B</span>11011, <span class="number">0B</span>11110, &#125;;</span><br><span class="line"></span><br><span class="line">    Matrix pre &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; limit; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; limit; ++j) &#123;</span><br><span class="line">            <span class="comment">// ~- limit = limit - 1</span></span><br><span class="line">            <span class="keyword">if</span> ((i | j) == ~-limit) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; ++k) &#123;</span><br><span class="line">                    pre[i][j] |= (i &amp; j) == s[k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Matrix ans &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; limit; ++i) &#123;</span><br><span class="line">        ans[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            ans *= pre;</span><br><span class="line">        &#125;</span><br><span class="line">        pre *= pre;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; ans[limit - <span class="number">1</span>][limit - <span class="number">1</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><section class="footnotes footnotes-end-of-document"role="doc-endnotes"><hr /><ol><li id="fn1" role="doc-endnote"><p><ahref="http://www.matrix67.com/blog/archives/276"class="uri">http://www.matrix67.com/blog/archives/276</a>已经给出解答，然而原文部分丢失。<a href="http://doc.100lw.com/doc/f74cd22a63dd121ffbcc425f6a018165fd726f49/4">此链接</a>开头便是本题的题解。<a href="#fnref1" class="footnote-back"role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;用 &lt;span class=&quot;math inline&quot;&gt;\(1 \times 2\)&lt;/span&gt; 的骨牌填满 &lt;span
class=&quot;math inline&quot;&gt;\(M \times N\)&lt;/span&gt; 的矩阵方案数，其中 &lt;span
class=&quot;math inline&quot;&gt;\(M \le 5.\)&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="vj" scheme="https://tau.gay/vj/"/>
    
    <category term="vijos" scheme="https://tau.gay/vijos/"/>
    
    
    <category term="AWESOME" scheme="https://tau.gay/tags/AWESOME/"/>
    
    <category term="floyd算法" scheme="https://tau.gay/tags/floyd%E7%AE%97%E6%B3%95/"/>
    
    <category term="矩阵乘法" scheme="https://tau.gay/tags/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>HEXO 博客站配置</title>
    <link href="https://tau.gay/blogconfig/"/>
    <id>https://tau.gay/blogconfig/</id>
    <published>2022-08-15T01:47:24.000Z</published>
    <updated>2022-09-03T09:18:39.495Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优化永久链接">优化永久链接</h2><h3 id="verbhttpsexample.comrmsout20220705verbanything"><spanclass="math inline">\(\verb|https://example.com/|\rm\sout{2022/07/05}\verb|/anything/|\)</span></h3><p>📅 默认的永久链接还标注了日期，大多时候这都是不必要的。首先在<code>_config.yml</code> 中设置：</p><span id="more"></span><figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">&#x27;:permalink&#x27;</span></span><br><span class="line"><span class="attr">permalink_defaults:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>这里的 <code>:permalink</code> 表示的是在每篇文章开头的<code>front-matter</code>部分的<u style="text-decoration-style: wavy;">变量</u>。例如本文对应的是：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: HEXO 博客站配置</span><br><span class="line">date: 2022-08-15 09:47:24</span><br><span class="line">permalink: /blogconfig/</span><br><span class="line"><span class="section">categories: etc</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>这样文章就没有冗余的日期信息了。</p><h2 id="新增页面">新增页面</h2><h3 id="verbhttpsexample.comabout"><spanclass="math inline">\(\verb|https://example.com/about/|\)</span></h3><p>在命令行中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>随后编辑 <code>source/about/index.md</code> 文件添加<code>layout: about</code> 。</p><p>接下来可以写各种内容，整篇文章将会显示在 <ahref="https://example.com/about/"class="uri">https://example.com/about/</a> 中。</p><h3 id="verbhttpsexample.comtags"><spanclass="math inline">\(\verb|https://example.com/tags/|\)</span></h3><p>同上，但多数主题自带了 tags 的布局。</p><h3 id="verbhttpsexample.comcategories"><spanclass="math inline">\(\verb|https://example.com/categories/|\)</span></h3><p>同上。但这个页面作用还是非常大的，常常希望在某一页面内放特定主题的文章，例如<a href="/cf/">https://example.com/cf/</a> 就可以直接到所有<code>cf</code> 相关的博客内。</p><p>其实，这就是分类页面 <code>categories</code> 的作用。</p><h4 id="verbhttpsexample.comrmsoutcategoriesverbanything"><spanclass="math inline">\(\verb|https://example.com/|\rm\sout{categories}\verb|/anything/|\)</span></h4><p>默认的分类页面需要用形如 <ahref="https://example.com/categories/xxx/"class="uri">https://example.com/categories/xxx/</a>来访问，这样的链接并不美观。在 <code>_config.yml</code> 文件中设置：</p><figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">category_dir:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这样就可以<ahref="https://stackoverflow.com/questions/40654424/how-to-get-rid-of-categories-in-url-in-hexo">「摆脱categories」了</a>！</p><p>同时，这也很好地与笔者的 permalink 习惯匹配。笔者通常会使用<code>cf/2/a/</code> 这样的链接，如果不进行上述修改，就不会有<code>/cf/</code> 这个页面，这令人感到十分不自然。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;优化永久链接&quot;&gt;优化永久链接&lt;/h2&gt;
&lt;h3 id=&quot;verbhttpsexample.comrmsout20220705verbanything&quot;&gt;&lt;span
class=&quot;math inline&quot;&gt;\(\verb|https://example.com/|\rm\sout{2022/07/05}\verb|/anything/|\)&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;📅 默认的永久链接还标注了日期，大多时候这都是不必要的。首先在
&lt;code&gt;_config.yml&lt;/code&gt; 中设置：&lt;/p&gt;</summary>
    
    
    
    <category term="etc" scheme="https://tau.gay/etc/"/>
    
    
  </entry>
  
  <entry>
    <title>博文风格</title>
    <link href="https://tau.gay/blogstyle/"/>
    <id>https://tau.gay/blogstyle/</id>
    <published>2022-08-15T01:47:24.000Z</published>
    <updated>2022-09-03T09:18:20.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置">配置</h2><ul><li>📚 通过 <span class="math inline">\(\verb|example.com/xxx/|\)</span>进入 <span class="math inline">\(\verb|xxx|\)</span> 分类，如<a href="/acm/">/acm/</a>。</li><li>🪧 通过 <spanclass="math inline">\(\verb|example.com/tags/xxx/|\)</span> 查看包含<span class="math inline">\(\verb|xxx|\)</span> 标签的内容。<ul><li>特殊的，<a href="/tags/AWESOME">/tags/AWESOME/</a>中收藏了一些笔者认为值得一做的题。</li></ul></li><li>🦜 通过 <code>&lt;!-- more --&gt;</code>分隔。这样就形成了在主页中看到的预览效果。</li><li><del>按照 <code>rating</code> 进行降序排序。</del></li></ul><span id="more"></span><h2 id="口吻">口吻</h2><ul><li>✍减少「即可」，「显然」，「我们」和「我」等用辞，尽量增添客观、书面描述。</li></ul><h2 id="排版">排版</h2><ul><li><p>📦 若代码并非讲解内容，应当使用 <spanclass="math inline">\(\verb|&lt;details&gt;|\)</span> 标签配合 <spanclass="math inline">\(\verb|&lt;summary&gt;|\)</span>包裹起来。</p></li><li><p>💡 引用块通常都不是引用而指出重要公式、定理。</p><blockquote><p><span class="math inline">\(\max\limits_{i = 1}^N \varphi(i) =\varphi(p).\)</span> 其中 <span class="math inline">\(p\)</span> 为<span class="math inline">\(1 \sim N\)</span> 中的最大素数。</p></blockquote></li><li><p>📚 不使用 <span class="math inline">\(\verb|****|\)</span>围住加粗内容，而总使用 <spanclass="math inline">\(\verb|&lt;b&gt;&lt;/b&gt;|\)</span>。斜体、底线、删除线、行内代码亦然。</p><ul><li>〰️ <u style="text-decoration-style:wavy;">笔者最近喜欢波浪线</u> 即<code>&lt;u style="text-decoration-style:wavy;"&gt;&lt;/u&gt;</code></li></ul></li></ul><h2 id="公式排版">公式排版</h2><ul><li>使用 <span class="math inline">\(\verb|\verb|\)</span> 围住写在<span class="math inline">\(\LaTeX\)</span> 中的代码，有的时候也用来取代<spanclass="math inline">\(\verb|&lt;code&gt;&lt;/code&gt;|\)</span>。</li><li>如果行内公式包含上下限，总使用 <spanclass="math inline">\(\verb|\limits|\)</span> 修饰。</li><li>使用 <span class="math inline">\(\verb|\dfrac|\)</span><ul><li><span class="math inline">\(\frac{a / b}{ \sum \limits _{i = 1} ^ Ni ^ 3 } \rightarrow \dfrac{a / b}{\displaystyle\sum_{i = 1} ^ N i ^3}\)</span></li></ul></li><li>合适的括号大小。总使用 <code>\left</code> <code>\right</code><ul><li><span class="math inline">\(\boxed{\{ \dfrac{\dfrac{a}{c}}{b} \}}\rightarrow \boxed{\left \{ \dfrac{a / c}{b} \right \}}\)</span></li></ul></li><li>公式较多的情况下，使用 <spanclass="math inline">\(\color{red}\verb|\color|\)</span> 与 <spanclass="math inline">\(\boxed{\verb|\boxed|}\)</span> 标注主要内容。</li><li><span class="math inline">\(\cdots\)</span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;配置&quot;&gt;配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;📚 通过 &lt;span class=&quot;math inline&quot;&gt;\(\verb|example.com/xxx/|\)&lt;/span&gt;
进入 &lt;span class=&quot;math inline&quot;&gt;\(\verb|xxx|\)&lt;/span&gt; 分类，如
&lt;a href=&quot;/acm/&quot;&gt;/acm/&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;🪧 通过 &lt;span
class=&quot;math inline&quot;&gt;\(\verb|example.com/tags/xxx/|\)&lt;/span&gt; 查看包含
&lt;span class=&quot;math inline&quot;&gt;\(\verb|xxx|\)&lt;/span&gt; 标签的内容。
&lt;ul&gt;
&lt;li&gt;特殊的，&lt;a href=&quot;/tags/AWESOME&quot;&gt;/tags/AWESOME/&lt;/a&gt;
中收藏了一些笔者认为值得一做的题。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;🦜 通过 &lt;code&gt;&amp;lt;!-- more --&amp;gt;&lt;/code&gt;
分隔。这样就形成了在主页中看到的预览效果。&lt;/li&gt;
&lt;li&gt;&lt;del&gt;
按照 &lt;code&gt;rating&lt;/code&gt; 进行降序排序。
&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="etc" scheme="https://tau.gay/etc/"/>
    
    
  </entry>
  
  <entry>
    <title>目前的代码风格</title>
    <link href="https://tau.gay/codestyle/"/>
    <id>https://tau.gay/codestyle/</id>
    <published>2022-08-15T01:47:24.000Z</published>
    <updated>2022-08-30T02:12:54.449Z</updated>
    
    <content type="html"><![CDATA[<ul><li>多数情形下需要使用 <code>C++20</code> 以上版本编译笔者的代码。</li></ul><p>笔者将减少奇奇怪怪的位运算和宏定义的使用。下面是较新文章中的代码部分。</p><ul><li>大括号齐行</li><li>尽量不压行</li><li>必要的注释</li></ul><span id="more"></span><figure class="highlight cpp"><figcaption><span>any.cpp >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector <span class="title">a</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> pos&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[pos]) &#123;</span><br><span class="line">            pos = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    R::<span class="built_in">rotate</span>(a, a.<span class="built_in">begin</span>() + pos);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ++top, top--, top 长度上完胜</span></span><br><span class="line">    <span class="comment">// push_back pop_back back</span></span><br><span class="line">    <span class="type">int</span> top&#123;&#125;;</span><br><span class="line">    <span class="function">vector <span class="title">stk</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector <span class="title">cnt</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>; <span class="comment">// 次数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// n - 1 对相邻</span></span><br><span class="line">    ll  ans&#123;n - <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">1</span>, n)) &#123; <span class="comment">// 枚举右端点</span></span><br><span class="line">        <span class="comment">// 匹配更大的左端点</span></span><br><span class="line">        <span class="keyword">while</span> (top &amp;&amp; stk[top] &lt; a[i]) &#123;</span><br><span class="line">            ans += cnt[top--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 严格高于 -- 要判重</span></span><br><span class="line">        <span class="keyword">if</span> (stk[top] != a[i]) &#123;</span><br><span class="line">            stk[++top] = a[i];</span><br><span class="line">            cnt[top]   = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += cnt[top]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后一次: 加入最大值</span></span><br><span class="line">    <span class="keyword">while</span> (top &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        ans += cnt[top--];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><del>实际上笔者没有比较固定的代码风格。有的时候甚至会写出下面这样的代码（逃）</del><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">per</span>(i,~-n,<span class="number">0</span>)s+=<span class="number">1</span>,ans+=<span class="built_in">kuhn</span>(i);</span><br><span class="line"><span class="keyword">if</span>(ans!=n)<span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No Answer&quot;</span>),<span class="number">0x0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">rep</span>(i,n,~-n&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)L[f[i]]=i-n;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,~-n)<span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,L[i],<span class="string">&quot; \n&quot;</span>[i==n]);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;多数情形下需要使用 &lt;code&gt;C++20&lt;/code&gt; 以上版本编译笔者的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;笔者将减少奇奇怪怪的位运算和宏定义的使用。下面是较新文章中的代码部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大括号齐行&lt;/li&gt;
&lt;li&gt;尽量不压行&lt;/li&gt;
&lt;li&gt;必要的注释&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="etc" scheme="https://tau.gay/etc/"/>
    
    
  </entry>
  
  <entry>
    <title>浮点数的比较符</title>
    <link href="https://tau.gay/double-compare/"/>
    <id>https://tau.gay/double-compare/</id>
    <published>2022-08-15T01:47:24.000Z</published>
    <updated>2022-08-21T17:59:34.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算几何符号比较表">计算几何符号比较表</h2><table><thead><tr class="header"><th style="text-align: center;">意义</th><th style="text-align: center;">写法</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><span class="math inline">\(a =b\)</span></td><tdstyle="text-align: center;"><code>fabs(a - b) &lt; epsilon</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(a \neb\)</span></td><tdstyle="text-align: center;"><code>fabs(a - b) &gt; epsilon</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(a &lt;b\)</span></td><td style="text-align: center;"><code>a - b &lt; - epsilon</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(a \leb\)</span></td><td style="text-align: center;"><code>a - b &lt; epsilon</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(a &gt;b\)</span></td><td style="text-align: center;"><code>a - b &gt; epsilon</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(a \geb\)</span></td><td style="text-align: center;"><code>a - b &gt; - epsilon</code></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;计算几何符号比较表&quot;&gt;计算几何符号比较表&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;意义&lt;/th&gt;
&lt;th style=&quot;text-align: center;</summary>
      
    
    
    
    <category term="etc" scheme="https://tau.gay/etc/"/>
    
    
  </entry>
  
  <entry>
    <title>NC11255E</title>
    <link href="https://tau.gay/nc/11255/e/"/>
    <id>https://tau.gay/nc/11255/e/</id>
    <published>2022-08-14T22:18:18.000Z</published>
    <updated>2022-08-21T17:59:34.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p><span class="math inline">\(n\)</span>个节点的树，给定边权为两点点权异或和 <span class="math inline">\(w_{u,v} = w_u \oplus w_v\)</span>。每个点权的取值范围 <spanclass="math inline">\(l_i \le w_i \le r_i\)</span>，求满足条件的 <spanclass="math inline">\(w_i\)</span> 的数量。</p><span id="more"></span><ul><li><span class="math inline">\(n \in [1, 10 ^ 5], l_i, r_i \in [1, 2 ^{30}]\)</span></li></ul><p><a href="https://ac.nowcoder.com/acm/contest/11255/E"class="uri">https://ac.nowcoder.com/acm/contest/11255/E</a></p><h2 id="解答">解答</h2><p>确定任一点即可确定整棵树，不妨以根为中心。如果现在根节点是 <spanclass="math inline">\(x \in [l_0,r_0]\)</span>，需要考虑对于其他节点来说是否有：</p><p><span class="math display">\[w_i \in [l_i, r_i]\overset{?}{\Rightarrow}w_i \oplus x \in [l_i, r_i]\]</span></p><blockquote><p>等号成立，当且仅当 <span class="math inline">\([l, r]\)</span> 中包含<span class="math inline">\(2 ^ k\)</span> 个数并且低 <spanclass="math inline">\(k\)</span> 位包含 <span class="math inline">\(0\sim 2 ^ k - 1\)</span> <a href="#fn1" class="footnote-ref" id="fnref1"role="doc-noteref"><sup>1</sup></a>。</p></blockquote><p>「低位包含全部的数」这样的条件，即可以转换为一段连续的区间从而在值域开线段树来解决，也同时意味着<u style="text-decoration-style:wavy;">这些点是Trie 的一棵子树</u>。</p><p>用 Trie标记出不合法的区间，再计算该子树的贡献即可（相当于对若干合法区间求交）。更详细的部分可见代码注释。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于 const int N; 字典树要开 bits * nodes</span></span><br><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">    N = <span class="number">30</span> * <span class="number">100010</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head[N], cnt, u, v, w;</span><br><span class="line"><span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> next, to, w;</span><br><span class="line">&#125;</span><br><span class="line">edges[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    edges[++cnt] = &#123; head[u], v, w &#125;;</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trie 部分. T tag &#123;0/1/2&#125; 表示 &#123;2/1/0&#125; 个儿子合法</span></span><br><span class="line"><span class="type">int</span> son[N][<span class="number">2</span>], tot;</span><br><span class="line"><span class="type">int</span> T[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ++tot;</span><br><span class="line">    T[tot] = son[tot][<span class="number">0</span>] = son[tot][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">trie</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> b, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 已经不合法/这颗子树覆盖 2 ^ bits 个树</span></span><br><span class="line">    <span class="comment">// 即 r - l = 2 ^ (b + 1) - 1 下同</span></span><br><span class="line">    <span class="keyword">if</span> (T[u] == <span class="number">2</span> || r - l == ~-(<span class="number">1</span> &lt;&lt; -~b)) &#123;</span><br><span class="line">        <span class="keyword">return</span> T[u];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v: &#123; <span class="number">0</span>, <span class="number">1</span> &#125;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!son[u][v]) &#123;</span><br><span class="line">            son[u][v] = <span class="built_in">newNode</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// l, r 第 b 位相同</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="type">int</span> m = <span class="number">1</span> &lt;&lt; b;</span><br><span class="line">        (l &amp; m) == (r &amp; m)) &#123;</span><br><span class="line">        <span class="comment">// 当前的权与 l 第 b 位相同</span></span><br><span class="line">        <span class="comment">// 不相同的那一部分 l, r 也管不了直接标记为无用</span></span><br><span class="line">        <span class="type">bool</span> st = (l &amp; m) ^ (w &amp; m);</span><br><span class="line">        T[son[u][!st]] = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// m = 2 ^ b. %m 其实就是 &amp; ( m - 1 )</span></span><br><span class="line">        T[u] = <span class="built_in">trie</span>(son[u][st], b - <span class="number">1</span>, l % m, r % m, w) == <span class="number">2</span> ? <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">bool</span> st = w &amp; m;</span><br><span class="line">        <span class="comment">// b 位是 1/0 时子树的情况</span></span><br><span class="line">        <span class="type">int</span> lft = <span class="built_in">trie</span>(son[u][st], b - <span class="number">1</span>, l % m, m - <span class="number">1</span>, w);</span><br><span class="line">        <span class="type">int</span> rgt = <span class="built_in">trie</span>(son[u][!st], b - <span class="number">1</span>, <span class="number">0</span>, r % m, w);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lft == <span class="number">2</span> &amp;&amp; rgt == <span class="number">2</span>) &#123;</span><br><span class="line">            T[u] = <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lft != <span class="number">2</span> || rgt != <span class="number">2</span>) &#123;</span><br><span class="line">            T[u] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> T[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> L[N], R[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> p, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">trie</span>(<span class="number">1</span>, <span class="number">29</span>, L[u], R[u], w);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = edges[i].next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="type">int</span> v = edges[i].to; v != p) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(v, u, w ^ edges[i].w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll ans &#123;&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getAns</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!T[u]) &#123;</span><br><span class="line">        <span class="comment">// 整棵树都可以用</span></span><br><span class="line">        ans += <span class="number">1</span> LL &lt;&lt; -~b;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T[u] == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 只有一边能用</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v: &#123; <span class="number">0</span>, <span class="number">1</span> &#125;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (T[son[u][v]] != <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="built_in">getAns</span>(son[u][v], b - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp; n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, L + i, R + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp; u, &amp; v, &amp; w);</span><br><span class="line">        <span class="built_in">addEdge</span>(u, v, w);</span><br><span class="line">        <span class="built_in">addEdge</span>(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">newNode</span>();</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">getAns</span>(<span class="number">1</span>, <span class="number">29</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><section class="footnotes footnotes-end-of-document"role="doc-endnotes"><hr /><ol><li id="fn1"role="doc-endnote"><p>这里隐含了高位均相同的前提，对于题目中的区间来说，这显然是成立的。<ahref="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;
个节点的树，给定边权为两点点权异或和 &lt;span class=&quot;math inline&quot;&gt;\(w_{u,
v} = w_u \oplus w_v\)&lt;/span&gt;。每个点权的取值范围 &lt;span
class=&quot;math inline&quot;&gt;\(l_i \le w_i \le r_i\)&lt;/span&gt;，求满足条件的 &lt;span
class=&quot;math inline&quot;&gt;\(w_i\)&lt;/span&gt; 的数量。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="nc" scheme="https://tau.gay/nc/"/>
    
    <category term="11255" scheme="https://tau.gay/nc/11255/"/>
    
    
    <category term="AWESOME" scheme="https://tau.gay/tags/AWESOME/"/>
    
    <category term="异或" scheme="https://tau.gay/tags/%E5%BC%82%E6%88%96/"/>
    
    <category term="trie" scheme="https://tau.gay/tags/trie/"/>
    
  </entry>
  
  <entry>
    <title>CF1712E2</title>
    <link href="https://tau.gay/cf/1712/e2/"/>
    <id>https://tau.gay/cf/1712/e2/</id>
    <published>2022-08-14T09:08:19.000Z</published>
    <updated>2022-09-06T17:35:45.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p><span class="math display">\[\displaystyle{\sum_{i = l}^r \sum _{j &gt; i}^r \sum_{k &gt; j}^r}\Big [\operatorname{lcm}(i, j, k) \ge i + j + k \Big] = \;?\]</span></p><span id="more"></span><ul><li><span class="math inline">\(1 \le l \lt r \le 2 \times 10 ^5.\)</span></li></ul><h2 id="解答">解答</h2><p>性质一般，且这样的三元组十分多。反过来却十分少，同时也可充分利用整除偏序，于是求：</p><p><span class="math display">\[\displaystyle\binom{r - l}{3} - \displaystyle{\sum_{i = l}^r \sum _{j&gt; i}^r \sum_{k &gt; j}^r} \Big [ \operatorname{lcm}(i, j, k)\color{red}{\;&lt;\;} \color{black} i + j + k \Big].\]</span></p><p>为叙述方便，<spanclass="math inline">\(\sout{\verb|\operatorname{lcm}(i, j, k)|}\)</span><del>实在太难打了</del> 令 <span class="math inline">\(x :=\operatorname{lcm}(i, j, k)\)</span>。</p><p>自然有 <span class="math inline">\(x \color{red}{\;\lt\;}\color{black} 3k\)</span>，即 <span class="math inline">\(x = k \cup x =2k\)</span>：</p><ol type="1"><li><p><span class="math inline">\(x = k\)</span> 是好满足的，只需要保证<span class="math inline">\(i \mid k \cap j \mid k\)</span>。</p></li><li><p><span class="math inline">\(x = 2k\)</span> 需要 <spanclass="math inline">\(i \mid x \cap j \mid x \cap i + j &gt;k\)</span>。</p><ol type="1"><li><p><span class="math inline">\(j := \dfrac{2k}{p} \Rightarrow\dfrac{k}{2} \lt \dfrac{2k}{p} \lt k \Rightarrow 2 \lt p \lt 4\Rightarrow p = 3\)</span>。即 <spanclass="math inline">\(\color{red}\boxed{ j = \dfrac{2k}{3}}\)</span></p></li><li><p>类似有 <span class="math inline">\(i := \dfrac{2k}{q} \Rightarrow\dfrac{2k}{3} \gt \dfrac{2k}{q} \gt k - j = \dfrac{k}{3}\)</span></p><p><span class="math inline">\(\Rightarrow 3 \lt q \lt 6 \Rightarrow\color{red} \boxed{ i = \dfrac{k}{2} \cup i =\dfrac{2k}{5}}\)</span></p></li></ol></li></ol><p>综上，答案形如 <span class="math inline">\((3, 4, 6)\)</span> 或<span class="math inline">\((6, 10, 15).\)</span>在预处理的时候就可以得到。</p><p>另外棘手的问题是区间询问，多组询问，可以从小区间拓展到大区间，这样节省下来许多时间。具体来说，固定右端点，从<span class="math inline">\(N\)</span>不断减少到左端点，将经过的所有大于 <spanclass="math inline">\(r\)</span>的点按照倍数遍历的方式标记出来，直到下降到左端点 <spanclass="math inline">\(l\)</span>。</p><p><span class="math inline">\(r\)</span>左边的所有标记的点加起来就是不合法的情况。可见整个过程需要单点修改区间求和，树状数组恰能胜任。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> V views</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector <span class="title">qry</span><span class="params">(t, tuple &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;)</span></span>;</span><br><span class="line">    <span class="function">vector <span class="title">ans</span><span class="params">(t, <span class="number">0</span> LL)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i: <span class="built_in">RI</span>(<span class="number">0</span>, t)) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        qry[i] = &#123; --l, r, i &#125;;</span><br><span class="line">        <span class="keyword">auto</span> len &#123; <span class="number">1</span> LL * r - l &#125;;</span><br><span class="line">        ans[i] = len * (len - <span class="number">1</span>) * (len - <span class="number">2</span>) / <span class="number">6</span> - <span class="built_in">max</span>(<span class="number">0</span>, r / <span class="number">6</span> - l / <span class="number">3</span>) - <span class="built_in">max</span>(<span class="number">0</span>, r / <span class="number">15</span> - l / <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    R::<span class="built_in">sort</span>(qry | V::reverse);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> N = <span class="number">200&#x27;001</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">bit</span> &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        vector &lt;ll&gt; tr;</span><br><span class="line">        <span class="built_in">bit</span>(<span class="type">int</span> _n): <span class="built_in">n</span>(_n + <span class="number">1</span>), <span class="built_in">tr</span>(_n + <span class="number">1</span>, <span class="number">0</span>) &#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">auto</span> <span class="title">qry</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">            ll res &#123;&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = p; i; i -= i &amp; -i) &#123;</span><br><span class="line">                res += tr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = p; i &lt;= n; i += i &amp; -i) &#123;</span><br><span class="line">                tr[i] += x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">g</span>(N);</span><br><span class="line"></span><br><span class="line">    <span class="function">vector <span class="title">c</span><span class="params">(N, <span class="number">0</span>)</span></span>; <span class="comment">// cnt</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>[l, r, i]: qry) &#123;</span><br><span class="line">        <span class="comment">// static 变量方便下一次询问接力跑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">static</span> <span class="type">int</span> cur &#123; N &#125;; cur &gt; l; --cur) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = cur * <span class="number">2</span>; j &lt;= N; j += cur) &#123;</span><br><span class="line">                g.<span class="built_in">mdf</span>(j, c[j]++);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[i] -= g.<span class="built_in">qry</span>(r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    R::<span class="built_in">copy</span>(ans, ostream_iterator&lt;ll&gt;&#123;cout, <span class="string">&quot;\n&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
\displaystyle{\sum_{i = l}^r \sum _{j &amp;gt; i}^r \sum_{k &amp;gt; j}^r}\Big [
\operatorname{lcm}(i, j, k) \ge i + j + k \Big] = \;?
\]&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1712" scheme="https://tau.gay/cf/1712/"/>
    
    
    <category term="树状数组" scheme="https://tau.gay/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    <category term="数论" scheme="https://tau.gay/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>CF1712E1</title>
    <link href="https://tau.gay/cf/1712/e1/"/>
    <id>https://tau.gay/cf/1712/e1/</id>
    <published>2022-08-14T09:08:17.000Z</published>
    <updated>2022-08-21T17:59:34.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>是 <a href="/cf/1712/e2/">CF1712E2</a> 的简单版。</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;是 &lt;a href=&quot;/cf/1712/e2/&quot;&gt;CF1712E2&lt;/a&gt; 的简单版。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1712" scheme="https://tau.gay/cf/1712/"/>
    
    
  </entry>
  
  <entry>
    <title>CF1407D</title>
    <link href="https://tau.gay/cf/1407/d/"/>
    <id>https://tau.gay/cf/1407/d/</id>
    <published>2022-08-14T09:08:03.000Z</published>
    <updated>2022-08-21T17:59:34.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>有 <span class="math inline">\(n\)</span> 个点，每个点具有高度 <spanclass="math inline">\(h_i\)</span>。如果可以从 <spanclass="math inline">\(i\)</span> 跳到 <span class="math inline">\(j\;(i\lt j)\)</span>，则要么相邻、要么中间所有元素比 <spanclass="math inline">\(h_i, h_j\)</span> 都高或者都低。问从 <spanclass="math inline">\(1\)</span> 跳到 <spanclass="math inline">\(n\)</span> 的最小步数。</p><span id="more"></span><h2 id="解答">解答</h2><p>相邻点更新：<code>dp[i] = dp[i - 1] + 1</code>。</p><p>后两者实际上需要找到「最近更大/小元素」（即nge），这是单调栈的基本问题。设当前枚举到 <spanclass="math inline">\(h_i\)</span>，从 nge 跳过来就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一直向前找</span></span><br><span class="line"><span class="keyword">while</span> (t1 &amp;&amp; a[i] &gt;= a[s1[t1]]) &#123;</span><br><span class="line">    <span class="comment">// 相等: 用最后一个点 i 直接覆盖前面的, 不用管</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="type">int</span> x = s1[t1--]; a[i] != a[x] &amp;&amp; t1) &#123;</span><br><span class="line">        dp[i] = <span class="built_in">min</span>(dp[i], dp[s1[t1]] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 相等</span></span><br><span class="line">s1[++t1] = i;</span><br></pre></td></tr></table></figure><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector <span class="title">a</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">0</span>, n)) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector <span class="title">dp</span><span class="params">(n, numeric_limits&lt;<span class="type">int</span>&gt;::max())</span></span>;</span><br><span class="line">    <span class="function">vector <span class="title">s1</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span>, <span class="title">s2</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t1&#123;&#125;, t2&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    s1[++t1] = s2[++t2] = dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : <span class="built_in">RI</span>(<span class="number">1</span>, n)) &#123;</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (t1 &amp;&amp; a[i] &gt;= a[s1[t1]]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="type">int</span> x = s1[t1--]; a[i] != a[x] &amp;&amp; t1) &#123;</span><br><span class="line">                dp[i] = <span class="built_in">min</span>(dp[i], dp[s1[t1]] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s1[++t1] = i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (t2 &amp;&amp; a[i] &lt;= a[s2[t2]]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="type">int</span> x = s2[t2--]; a[i] != a[x] &amp;&amp; t2) &#123;</span><br><span class="line">                dp[i] = <span class="built_in">min</span>(dp[i], dp[s2[t2]] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s2[++t2] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; dp.<span class="built_in">back</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;有 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 个点，每个点具有高度 &lt;span
class=&quot;math inline&quot;&gt;\(h_i\)&lt;/span&gt;。如果可以从 &lt;span
class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt; 跳到 &lt;span class=&quot;math inline&quot;&gt;\(j\;(i
\lt j)\)&lt;/span&gt;，则要么相邻、要么中间所有元素比 &lt;span
class=&quot;math inline&quot;&gt;\(h_i, h_j\)&lt;/span&gt; 都高或者都低。问从 &lt;span
class=&quot;math inline&quot;&gt;\(1\)&lt;/span&gt; 跳到 &lt;span
class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 的最小步数。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1407" scheme="https://tau.gay/cf/1407/"/>
    
    
    <category term="nge" scheme="https://tau.gay/tags/nge/"/>
    
    <category term="dp" scheme="https://tau.gay/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>CF1712D</title>
    <link href="https://tau.gay/cf/1712/d/"/>
    <id>https://tau.gay/cf/1712/d/</id>
    <published>2022-08-14T09:08:03.000Z</published>
    <updated>2022-08-21T17:59:34.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>造出完全图，边长为 <span class="math inline">\(\min\limits_{i = l}^ra_i\)</span>。 问至多修改 <span class="math inline">\(k\)</span> 次任意<span class="math inline">\(a_i\)</span>后，可能得到的最长直径（<u style="text-decoration-style:wavy;">最大叶间距</u>）长。</p><span id="more"></span><p>每次修改成 <span class="math inline">\([1, 10 ^ 9]\)</span>的数字。</p><h2 id="解答">解答</h2><p>设 <span class="math inline">\(x\)</span> 为可能的解，那么存在若干<span class="math inline">\(&lt; x\)</span> 的解，二分性质是满足的。</p><p>多个数做 <span class="math inline">\(\min\)</span> 操作不会比两个数做<span class="math inline">\(\min\)</span>更好。因此直径端点一定是两相邻元素。这样的路径有两种（当然，可以看作仅有后者）：</p><ol type="1"><li>中途没有经过点。这种情况下只需要修改两端点。</li><li>中间经过若干点。此情形下的直径为 <span class="math inline">\(2\times\)</span>中间的最小值（走到前/后面的某个点再回去），需要修改中途所有 <spanclass="math inline">\(2 a_i \lt x\)</span>的点，需要用前缀和、后缀和分别记下这样的点。</li></ol><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> V views</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> tests;</span><br><span class="line">    cin &gt;&gt; tests;</span><br><span class="line">    <span class="keyword">while</span> (tests--) &#123;</span><br><span class="line">        <span class="type">int</span> n, k;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="function">vector <span class="title">a</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i: <span class="built_in">RI</span>(<span class="number">1</span>, n + <span class="number">1</span>)) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> l&#123;<span class="number">1</span>&#125;, r&#123; <span class="number">1&#x27;000&#x27;000&#x27;000</span> &#125;; </span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">auto</span> mid &#123; <span class="built_in">midpoint</span>(l + <span class="number">1</span>, r) &#125;;</span><br><span class="line">            <span class="keyword">if</span> ([ &amp; ]() -&gt; <span class="type">bool</span> &#123;</span><br><span class="line">                    vector <span class="built_in">p</span>(n + <span class="number">2</span>, <span class="number">0</span>), <span class="built_in">s</span>(n + <span class="number">2</span>, <span class="number">0</span>); <span class="comment">// prefix and suffix</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i: <span class="built_in">RI</span>(<span class="number">1</span>, n + <span class="number">1</span>)) &#123;</span><br><span class="line">                        p[i] = p[i - <span class="number">1</span>] + (a[i] * <span class="number">2</span> &lt; mid);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i: <span class="built_in">RI</span>(<span class="number">1</span>, n + <span class="number">1</span>) | V::reverse) &#123;</span><br><span class="line">                        s[i] = s[i + <span class="number">1</span>] + (a[i] * <span class="number">2</span> &lt; mid);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i: <span class="built_in">RI</span>(<span class="number">1</span>, n)) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (p[i - <span class="number">1</span>] + s[i + <span class="number">2</span>] + (a[i] &lt; mid) + (a[i + <span class="number">1</span>] &lt; mid) &lt;= k) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">                &#125;()) &#123;</span><br><span class="line">                l = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; l &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;造出完全图，边长为 &lt;span class=&quot;math inline&quot;&gt;\(\min\limits_{i = l}^r
a_i\)&lt;/span&gt;。 问至多修改 &lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt; 次任意
&lt;span class=&quot;math inline&quot;&gt;\(a_i\)&lt;/span&gt;
后，可能得到的最长直径（&lt;u style=&quot;text-decoration-style:wavy;&quot;&gt;最大叶间距&lt;/u&gt;）长。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1712" scheme="https://tau.gay/cf/1712/"/>
    
    
    <category term="二分" scheme="https://tau.gay/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>CF1712C</title>
    <link href="https://tau.gay/cf/1712/c/"/>
    <id>https://tau.gay/cf/1712/c/</id>
    <published>2022-08-14T09:08:01.000Z</published>
    <updated>2022-08-21T17:59:34.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>给定正整数序列，可以将某一等值的元素全改成 <spanclass="math inline">\(0\)</span>。问使得序列非递减的最少次数。</p><span id="more"></span><h2 id="解答">解答</h2><p>一些事实：</p><ol type="1"><li>最后的序列中，元素总是成块出现。</li><li>如果原数组不满足第 <span class="math inline">\(1\)</span>条，那么最后的数组前缀有若干 <spanclass="math inline">\(0\)</span>。</li></ol><p>从前向后扫描，遇到某个后缀还未有序，则表明当前点的数应当变为 <spanclass="math inline">\(0\)</span>，直到该元素的最后一次出现。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> V views</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> tests;</span><br><span class="line">    cin &gt;&gt; tests;</span><br><span class="line">    <span class="keyword">while</span> (tests--) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="function">vector <span class="title">a</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span>, b </span>&#123; a &#125;, c &#123; a &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i: <span class="built_in">RI</span>(<span class="number">1</span>, n + <span class="number">1</span>)) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">            b[a[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector <span class="title">s</span><span class="params">(n + <span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        s[n] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i: <span class="built_in">RI</span>(<span class="number">1</span>, n) | V::reverse) &#123;</span><br><span class="line">            s[i] = s[i + <span class="number">1</span>] &amp; (a[i] &lt;= a[i + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans &#123;&#125;, pos &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i: <span class="built_in">RI</span>(<span class="number">1</span>, n + <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">if</span> (!c[a[i]]) &#123; <span class="comment">// 未被移除</span></span><br><span class="line">                <span class="keyword">if</span> (pos &lt; i &amp;&amp; s[i]) &#123;</span><br><span class="line">                    <span class="comment">// 好耶! 后面已经有序</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; </span><br><span class="line">                ans += c[a[i]] = <span class="number">1</span>; <span class="comment">// 删掉这个元素</span></span><br><span class="line">                pos = <span class="built_in">max</span>(pos, b[a[i]]); <span class="comment">// 直到最后一次出现</span></span><br><span class="line">            &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给定正整数序列，可以将某一等值的元素全改成 &lt;span
class=&quot;math inline&quot;&gt;\(0\)&lt;/span&gt;。问使得序列非递减的最少次数。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1712" scheme="https://tau.gay/cf/1712/"/>
    
    
  </entry>
  
  <entry>
    <title>CF1712A</title>
    <link href="https://tau.gay/cf/1712/a/"/>
    <id>https://tau.gay/cf/1712/a/</id>
    <published>2022-08-14T09:07:59.000Z</published>
    <updated>2022-08-21T17:59:34.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>在排列 <span class="math inline">\(\{P\}\)</span>上进行若干次交换，使得前 <span class="math inline">\(k\)</span>项之和最小的操作次数？</p><span id="more"></span><h2 id="解答">解答</h2><p>由于是排列，将 <span class="math inline">\(1 \sim k\)</span>的元素换到前 <span class="math inline">\(k\)</span> 即可。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::placeholders;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> tests;</span><br><span class="line">    cin &gt;&gt; tests;</span><br><span class="line">    <span class="keyword">while</span> (tests--) &#123;</span><br><span class="line">        <span class="type">int</span> n, k;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="function">vector <span class="title">a</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp; i: a) &#123;</span><br><span class="line">            cin &gt;&gt; i;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ranges::<span class="built_in">count_if</span>(a | views::<span class="built_in">take</span>(k), <span class="built_in">bind</span>(greater &#123;&#125;, _1, k)) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="bonus">Bonus</h2><p>分别给出 <span class="math inline">\(1 \sim k\)</span> 的答案。</p><h3 id="solution">Solution</h3><p>如果依然是排列，那么结论不变。对前缀 <span class="math inline">\(1\sim x\)</span> 中出现的 <span class="math inline">\(1 \sim x\)</span>的数的数量进行询问是数状数组的基本问题。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R std::ranges</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI R::iota_view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tests;</span><br><span class="line">    cin &gt;&gt; tests;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (tests--) &#123;</span><br><span class="line">        <span class="type">int</span> n, k;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="function">vector <span class="title">a</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp; i: a) &#123;</span><br><span class="line">            cin &gt;&gt; i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">bit</span> &#123;</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            vector &lt; <span class="type">int</span> &gt; tr;</span><br><span class="line">            <span class="built_in">bit</span>(<span class="type">int</span> _n): <span class="built_in">n</span>(_n + <span class="number">1</span>), <span class="built_in">tr</span>(_n + <span class="number">1</span>, <span class="number">0</span>) &#123;&#125;;</span><br><span class="line">            <span class="function"><span class="keyword">auto</span> <span class="title">qry</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">                <span class="type">int</span> res &#123;&#125;;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = p; i; i -= i &amp; -i) &#123;</span><br><span class="line">                    res += tr[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = p; i &lt;= n; i += i &amp; -i) &#123;</span><br><span class="line">                    tr[i] += x;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="built_in">g</span>(n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i: <span class="built_in">RI</span>(<span class="number">0</span>, k)) &#123;</span><br><span class="line">            g.<span class="built_in">mdf</span>(a[i], <span class="number">1</span>);</span><br><span class="line">            cout &lt;&lt; i + <span class="number">1</span> - g.<span class="built_in">qry</span>(i + <span class="number">1</span>) &lt;&lt; <span class="string">&quot; \n&quot;</span> [i + <span class="number">1</span> == k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;在排列 &lt;span class=&quot;math inline&quot;&gt;\(\{P\}\)&lt;/span&gt;
上进行若干次交换，使得前 &lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt;
项之和最小的操作次数？&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1712" scheme="https://tau.gay/cf/1712/"/>
    
    
    <category term="贪心" scheme="https://tau.gay/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>CF1712B</title>
    <link href="https://tau.gay/cf/1712/b/"/>
    <id>https://tau.gay/cf/1712/b/</id>
    <published>2022-08-14T09:07:59.000Z</published>
    <updated>2022-09-03T08:26:02.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>构造排列 <span class="math inline">\(\{P\}\)</span> 使得 <spanclass="math inline">\(\displaystyle \sum_{i = 1} ^ n\operatorname{lcm}(i, P_i)\)</span> 尽可能大。</p><span id="more"></span><h2 id="解答">解答</h2><p>一个单纯的想法是：按照奇偶性分开。因为 <spanclass="math inline">\(\operatorname{lcm}(2j, 2k) = 2jk\)</span>但如果和奇数 <span class="math inline">\(\operatorname{lcm}\)</span>就不会浪费掉 <span class="math inline">\(2\)</span>。</p><p>根据 <span class="math inline">\(\operatorname{lcm}(i, i + 1) = i\times (i + 1)\)</span>。给出构造，答案为：</p><p><span class="math display">\[\begin{aligned}&amp; \left \{\begin{aligned}&amp;\operatorname{lcm}(1, 1)&amp;\mathrm{\;if\;} n \equiv 1 \pmod 2\\2 \times&amp;\operatorname{lcm}(1, 2)&amp;\mathrm{otherwise}  \end{aligned} \right .+2 \times \operatorname{lcm}(i, i + 1)+\cdots+2 \times \operatorname{lcm}(n, n - 1)\\=&amp;\quad\color{red}\boxed{\dfrac{n(n + 1)(2n + 1)}{6}-\left\lfloor\dfrac{n}{2}\right\rfloor}\end{aligned}\]</span></p><p>进行任意对换都将破坏系数 <spanclass="math inline">\(2\)</span>，并且<b>只会更小</b>。这样就说明了答案不会更大。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(!cin.<span class="built_in">tie</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> tests;</span><br><span class="line">    cin &gt;&gt; tests;</span><br><span class="line">    <span class="keyword">while</span> (tests--) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="function">vector <span class="title">a</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="built_in">iota</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n % <span class="number">2</span>; i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[i], a[i + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        ranges::<span class="built_in">copy</span>(a, <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;构造排列 &lt;span class=&quot;math inline&quot;&gt;\(\{P\}\)&lt;/span&gt; 使得 &lt;span
class=&quot;math inline&quot;&gt;\(\displaystyle \sum_{i = 1} ^ n
\operatorname{lcm}(i, P_i)\)&lt;/span&gt; 尽可能大。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1712" scheme="https://tau.gay/cf/1712/"/>
    
    
    <category term="构造" scheme="https://tau.gay/tags/%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>二维偏序比较</title>
    <link href="https://tau.gay/2d-precede-compare/"/>
    <id>https://tau.gay/2d-precede-compare/</id>
    <published>2022-08-14T01:47:24.000Z</published>
    <updated>2022-08-21T17:59:34.111Z</updated>
    
    <content type="html"><![CDATA[<p>行表示第一维，即 <span class="math inline">\((\boxed{a_i}, b_i) \prec(\boxed{a_j}, b_j)\)</span>。</p><p>除第一维是 <span class="math inline">\(\ge\)</span>外，其余情况还需满足可重。否则退化为普通情形，即直接按照符号（不带等号）排。</p><table><colgroup><col style="width: 20%" /><col style="width: 20%" /><col style="width: 20%" /><col style="width: 20%" /><col style="width: 20%" /></colgroup><thead><tr class="header"><th style="text-align: center;"></th><th style="text-align: center;"><spanclass="math inline">\(\le\)</span></th><th style="text-align: center;"><spanclass="math inline">\(\lt\)</span></th><th style="text-align: center;"><spanclass="math inline">\(\ge\)</span></th><th style="text-align: center;"><spanclass="math inline">\(\gt\)</span></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><spanclass="math inline">\(\le\)</span></td><td style="text-align: center;">默认</td><td style="text-align: center;">查询时使用 <code>query(x-1)</code></td><td style="text-align: center;">离散化时逆序排序</td><td style="text-align: center;">结合 <spanclass="math inline">\(\lt\)</span> 和 <spanclass="math inline">\(\ge\)</span></td></tr><tr class="even"><td style="text-align: center;"><spanclass="math inline">\(\lt\)</span></td><td style="text-align: center;">第二维逆序排序</td><td style="text-align: center;">结合</td><td style="text-align: center;">结合</td><td style="text-align: center;">结合</td></tr><tr class="odd"><td style="text-align: center;"><spanclass="math inline">\(\ge\)</span></td><td style="text-align: center;">第一维逆序排序</td><td style="text-align: center;">结合</td><td style="text-align: center;">结合</td><td style="text-align: center;">结合</td></tr><tr class="even"><td style="text-align: center;"><spanclass="math inline">\(\gt\)</span></td><td style="text-align: center;">两维<b>都</b>逆序排序</td><td style="text-align: center;">结合</td><td style="text-align: center;">结合</td><td style="text-align: center;">结合</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;行表示第一维，即 &lt;span class=&quot;math inline&quot;&gt;\((\boxed{a_i}, b_i) \prec
(\boxed{a_j}, b_j)\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;除第一维是 &lt;span class=&quot;math inline&quot;&gt;\(\ge\)</summary>
      
    
    
    
    <category term="etc" scheme="https://tau.gay/etc/"/>
    
    
    <category term="二维偏序" scheme="https://tau.gay/tags/%E4%BA%8C%E7%BB%B4%E5%81%8F%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>CF1A</title>
    <link href="https://tau.gay/cf/1/a/"/>
    <id>https://tau.gay/cf/1/a/</id>
    <published>2022-08-11T08:39:20.000Z</published>
    <updated>2022-08-21T17:59:34.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>至少用多少个 <span class="math inline">\(a \times a\)</span>的石板，才能完全填满 <span class="math inline">\(n \times m\)</span>的矩形？</p><span id="more"></span><h2 id="解答">解答</h2><p><span class="math inline">\(\left\lceil\dfrac{n}{a}\right\rceil\times \left\lceil\dfrac{m}{a}\right\rceil\)</span> 即为所求。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    ll n, m, a;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; a;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ((n + a - <span class="number">1</span>) / a) * ((m + a - <span class="number">1</span>) / a) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;至少用多少个 &lt;span class=&quot;math inline&quot;&gt;\(a \times a\)&lt;/span&gt;
的石板，才能完全填满 &lt;span class=&quot;math inline&quot;&gt;\(n \times m\)&lt;/span&gt;
的矩形？&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1" scheme="https://tau.gay/cf/1/"/>
    
    
  </entry>
  
  <entry>
    <title>CF1B</title>
    <link href="https://tau.gay/cf/1/b/"/>
    <id>https://tau.gay/cf/1/b/</id>
    <published>2022-08-11T08:39:20.000Z</published>
    <updated>2022-08-22T17:09:49.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><ul><li><span class="math inline">\(R\verb|{x}|C\verb|{y}|\)</span>描述坐标，表示在 <span class="math inline">\(x\)</span> 行 <spanclass="math inline">\(y\)</span> 列。</li><li><span class="math inline">\(\verb|BC|23\)</span> 则表示第 <spanclass="math inline">\(\verb|BC|\)</span> 列第 <spanclass="math inline">\(23\)</span> 行。其中 <spanclass="math inline">\(\verb|BC|\)</span> 的记法如下所述：</li></ul><p>第一列被标为 <span class="math inline">\(\verb|A|\)</span>，第二列为<span class="math inline">\(\verb|B|\)</span>，以此类推，第 <spanclass="math inline">\(26\)</span> 列为 <spanclass="math inline">\(\verb|Z|\)</span>。 接下来为由两个字母构成的列号:第 <span class="math inline">\(27\)</span> 列为 <spanclass="math inline">\(\verb|AA|\)</span>，第 <spanclass="math inline">\(28\)</span> 列为 <spanclass="math inline">\(\verb|AB| \cdots\)</span> 在标为 <spanclass="math inline">\(\verb|ZZ|\)</span>的列之后则由三个字母构成列号，如此类推。</p><p>写一个程序，实现两者的转换。</p><span id="more"></span><blockquote><p>常用的 Excel 表格使用第二种记法。</p><ul class="task-list"><li><input type="checkbox" disabled="" />TODO: [2022-07-28 Patricky]某年区域赛有个类似的题，记不清了，待补充。</li></ul></blockquote><h2 id="解答">解答</h2><p>看起来从输入上就已经相对复杂了，不过对于这种格式相对固定的字符串，我们可以使用正则表达式描述之。<span class="math inline">\(C\)</span> 语言中的 <spanclass="math inline">\(\verb|scanf(format, args...)|\)</span>中的格式串恰好能使用正则表达式进行输入。</p><p>这句 <code>scanf("%*[A-Z]%d", &amp;x);</code>表示的意思就是「忽略所有大写字符，并读入一个整数」。</p><p>接下来的部分就是进制转换了，注意这里的进制转换需要处理一下余数为<span class="math inline">\(0\)</span>，即 <spanclass="math inline">\(\verb|Z|\)</span> 的情况。</p><details><summary>展开参考代码</summary><p>第七行 <span class="math inline">\(\verb|&quot;%[A-Z]&quot;|\)</span>前的一个空格将吞噬所有空白字符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> col[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot; %[A-Z]%d%*[A-Z]%d&quot;</span>, col, &amp; a, &amp; b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (b) &#123;</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">while</span> (b) &#123;</span><br><span class="line">            <span class="type">int</span> r = b % <span class="number">26</span>;</span><br><span class="line">            b /= <span class="number">26</span>;</span><br><span class="line">            <span class="keyword">if</span> (!r) &#123;</span><br><span class="line">                r = <span class="number">26</span>;</span><br><span class="line">                b -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">append</span>(<span class="number">1</span>, r + <span class="string">&#x27;A&#x27;</span> - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s%d\n&quot;</span>, <span class="built_in">string</span>(ans.<span class="built_in">rbegin</span>(), ans.<span class="built_in">rend</span>()).<span class="built_in">c_str</span>(), a);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, n = <span class="built_in">strlen</span>(col); i &lt; n; ++i) &#123;</span><br><span class="line">            b = b * <span class="number">26</span> + col[i] - <span class="string">&#x27;A&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;R%dC%d\n&quot;</span>, a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tests;</span><br><span class="line">    cin &gt;&gt; tests;</span><br><span class="line">    <span class="keyword">while</span> (tests--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(R\verb|{x}|C\verb|{y}|\)&lt;/span&gt;
描述坐标，表示在 &lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt; 行 &lt;span
class=&quot;math inline&quot;&gt;\(y\)&lt;/span&gt; 列。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(\verb|BC|23\)&lt;/span&gt; 则表示第 &lt;span
class=&quot;math inline&quot;&gt;\(\verb|BC|\)&lt;/span&gt; 列第 &lt;span
class=&quot;math inline&quot;&gt;\(23\)&lt;/span&gt; 行。其中 &lt;span
class=&quot;math inline&quot;&gt;\(\verb|BC|\)&lt;/span&gt; 的记法如下所述：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一列被标为 &lt;span class=&quot;math inline&quot;&gt;\(\verb|A|\)&lt;/span&gt;，第二列为
&lt;span class=&quot;math inline&quot;&gt;\(\verb|B|\)&lt;/span&gt;，以此类推，第 &lt;span
class=&quot;math inline&quot;&gt;\(26\)&lt;/span&gt; 列为 &lt;span
class=&quot;math inline&quot;&gt;\(\verb|Z|\)&lt;/span&gt;。 接下来为由两个字母构成的列号:
第 &lt;span class=&quot;math inline&quot;&gt;\(27\)&lt;/span&gt; 列为 &lt;span
class=&quot;math inline&quot;&gt;\(\verb|AA|\)&lt;/span&gt;，第 &lt;span
class=&quot;math inline&quot;&gt;\(28\)&lt;/span&gt; 列为 &lt;span
class=&quot;math inline&quot;&gt;\(\verb|AB| \cdots\)&lt;/span&gt; 在标为 &lt;span
class=&quot;math inline&quot;&gt;\(\verb|ZZ|\)&lt;/span&gt;
的列之后则由三个字母构成列号，如此类推。&lt;/p&gt;
&lt;p&gt;写一个程序，实现两者的转换。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1" scheme="https://tau.gay/cf/1/"/>
    
    
    <category term="正则表达式" scheme="https://tau.gay/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    <category term="TODO" scheme="https://tau.gay/tags/TODO/"/>
    
  </entry>
  
  <entry>
    <title>CF1C</title>
    <link href="https://tau.gay/cf/1/c/"/>
    <id>https://tau.gay/cf/1/c/</id>
    <published>2022-08-11T08:39:20.000Z</published>
    <updated>2022-08-21T17:59:34.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>找出覆盖给定三角形 <span class="math inline">\(\triangle ABC\)</span>的最小<b>正多边形</b>面积。</p><span id="more"></span><h2 id="解答">解答</h2><p>所求正多边形的顶点一定都在 <span class="math inline">\(\triangleABC\)</span> 的外接圆上。使用反证法容易得到这一点，思路与证明「凸包内最大三角形顶点一定在凸包上」类似。</p><p>如何求得三角形对应外接圆的半径？事实上，有正弦定理 <spanclass="math inline">\(\dfrac{a}{\sin A} = \dfrac{b}{\sin B} =\dfrac{c}{\sin C} = 2R\)</span></p><p>已经给定了三点坐标，可以由向量叉积的几何意义（而不是海伦公式）求得面积：</p><p><span class="math display">\[S = \dfrac{1}{2} \left|\begin{matrix}x_1 &amp;y_1 &amp; 1\\ x_2 &amp;y_2 &amp; 1\\ x_3 &amp;y_3 &amp; 1\\\end{matrix} \right| = \dfrac{1}{2}\left|x_1y_2 + x_2y_3 + x_3y_1 -x_1y_3 - x_2y_1 - x_3y_2\right|\]</span></p><p>进而转化为 <span class="math inline">\(\dfrac{ab\sin C}{2}\)</span>的形式。总之，有 <span class="math inline">\(R =\dfrac{abc}{4S}\)</span> 。</p><p>接着要求这个外接圆经过三角形顶点最少有多少条边，这是 <spanclass="math inline">\(\gcd\)</span>的基本问题。各边（弦）对应圆心角的最大公约数 <spanclass="math inline">\(t\)</span> 即为所求。</p><p>圆心角怎么求？将弦的两点连结圆心，得到了一个边长为 <spanclass="math inline">\(\langle R, R, a \rangle\)</span>的三角形，由余弦定理：</p><p><span class="math display">\[\angle BOC = \arccos\left(\dfrac{R^2 +R^2 - a^2}{2R^2}\right) = \arccos\left(1 -\dfrac{a^2}{2R^2}\right)\]</span></p><p>于是该正多边形由 <span class="math inline">\(\dfrac{2\pi}{t}\)</span>个面积为 <span class="math inline">\(\dfrac{R^2\sin t}{2}\)</span>的三角形组成，那么所求便呼之欲出了。</p><details><summary>展开参考代码</summary><ul><li><p>使用递归 <span class="math inline">\(\gcd\)</span>会爆栈（当然不排除是 <spanclass="math inline">\(\verb|function|\)</span> 的缘故），因而笔者改用迭代实现。</p></li><li><p>注意 <span class="math inline">\(\epsilon\)</span>的取值，题目中说：</p></li></ul><blockquote><p>It's guaranteed that the number of angles in the optimal polygon isnot larger than <span class="math inline">\(100\)</span>.</p></blockquote><p>因而精度不需要控制太高，这反而会造成 <spanclass="math inline">\(\gcd\)</span> 迭代次数过多从而导致答案错误。</p><ul><li>第三个圆心角需要通过 <span class="math inline">\(2\pi - \angle AOB -\angle BOC\)</span> 得到，否则会有相当大的误差（钝角）。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> db = <span class="type">long</span> <span class="type">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> &#123; db x, y; &#125; P[<span class="number">3</span>] &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%Lf%Lf&quot;</span>, &amp; P[i].x, &amp; P[i].y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    db C[<span class="number">3</span>] &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> j = i == <span class="number">2</span> ? <span class="number">0</span> : i + <span class="number">1</span>;</span><br><span class="line">        C[i] = <span class="built_in">hypot</span>(P[i].x - P[j].x, P[i].y - P[j].y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// db p = (C[0] + C[1] + C[2]) / 2;</span></span><br><span class="line">    <span class="comment">// db S = sqrt(p * (p - C[0]) * (p - C[1]) * (p - C[2]));</span></span><br><span class="line"></span><br><span class="line">    db S &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> p = !i ? <span class="number">2</span> : i - <span class="number">1</span>, n = i == <span class="number">2</span> ? <span class="number">0</span> : i + <span class="number">1</span>;</span><br><span class="line">        S += P[i].x * P[n].y - P[i].x * P[p].y;</span><br><span class="line">    &#125;</span><br><span class="line">    S /= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    db R = C[<span class="number">0</span>] * C[<span class="number">1</span>] * C[<span class="number">2</span>] / (<span class="number">4</span> * S);</span><br><span class="line"></span><br><span class="line">    db a[<span class="number">3</span>] &#123;&#125;;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="built_in">acos</span>(<span class="number">1</span> - C[<span class="number">0</span>] * C[<span class="number">0</span>] / (<span class="number">2</span> * R * R));</span><br><span class="line">    a[<span class="number">1</span>] = <span class="built_in">acos</span>(<span class="number">1</span> - C[<span class="number">1</span>] * C[<span class="number">1</span>] / (<span class="number">2</span> * R * R));</span><br><span class="line">    a[<span class="number">2</span>] = <span class="number">2</span> * numbers::pi_v &lt; db &gt; -a[<span class="number">0</span>] - a[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constexpr</span> db epsilon = <span class="number">1E-2</span>; <span class="comment">// 2pi / 100 ~= 0.06283185307 =&gt; .01</span></span><br><span class="line">    function&lt;db(db, db)&gt; gcd = [&amp;](db x, db y) -&gt; db &#123;</span><br><span class="line">        <span class="comment">// return fabs(y) &lt; epsilon ? x : gcd(y, fmod(x, y)); =&gt; MLE</span></span><br><span class="line">        <span class="keyword">if</span> ((x - y) &lt; -epsilon) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">fabs</span>(y) &gt; epsilon) &#123;</span><br><span class="line">            <span class="built_in">tie</span>(x, y) = tuple &#123; y, <span class="built_in">fmod</span>(x, y) &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    db t = <span class="built_in">gcd</span>(a[<span class="number">0</span>], <span class="built_in">gcd</span>(a[<span class="number">1</span>], a[<span class="number">2</span>]));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.10Lf&quot;</span>, (numbers::pi_v&lt;db&gt; * R * R * <span class="built_in">sin</span>(t)) / t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;找出覆盖给定三角形 &lt;span class=&quot;math inline&quot;&gt;\(\triangle ABC\)&lt;/span&gt;
的最小&lt;b&gt;正多边形&lt;/b&gt;面积。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="1" scheme="https://tau.gay/cf/1/"/>
    
    
    <category term="计算几何" scheme="https://tau.gay/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
    <category term="浮点gcd" scheme="https://tau.gay/tags/%E6%B5%AE%E7%82%B9gcd/"/>
    
  </entry>
  
  <entry>
    <title>CF2A</title>
    <link href="https://tau.gay/cf/2/a/"/>
    <id>https://tau.gay/cf/2/a/</id>
    <published>2022-08-11T08:39:20.000Z</published>
    <updated>2022-08-21T17:59:34.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>积分板上将记录玩家与每回合的积分变化。问最终获得最高分数的选手中，谁最先达到了最高分数？</p><span id="more"></span><h2 id="解答">解答</h2><p>因为有负分制，因此需要处理完所有的积分之后再统计最大分数。随后重新从头向后找，看哪位选手第一个到达了最高分并且他最终获得了最高分。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    map&lt;string, <span class="type">int</span>&gt; rank, overview;</span><br><span class="line">    <span class="function">vector <span class="title">g</span><span class="params">(n, pair&lt;string, <span class="type">int</span>&gt;&#123;&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[k, v]: g) &#123;</span><br><span class="line">        cin &gt;&gt; k &gt;&gt; v;</span><br><span class="line">        rank[k] += v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> most = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[_, v]: rank) &#123;</span><br><span class="line">        most = <span class="built_in">max</span>(most, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[k, v]: g) &#123;</span><br><span class="line">        overview[k] += v;</span><br><span class="line">        <span class="keyword">if</span> (rank[k] == most &amp;&amp; overview[k] &gt;= most) &#123;</span><br><span class="line">            <span class="keyword">return</span> cout &lt;&lt; k &lt;&lt; <span class="string">&quot;\n&quot;</span>, <span class="type">int</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;积分板上将记录玩家与每回合的积分变化。问最终获得最高分数的选手中，谁最先达到了最高分数？&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="2" scheme="https://tau.gay/cf/2/"/>
    
    
  </entry>
  
  <entry>
    <title>CF2B</title>
    <link href="https://tau.gay/cf/2/b/"/>
    <id>https://tau.gay/cf/2/b/</id>
    <published>2022-08-11T08:39:20.000Z</published>
    <updated>2022-08-21T17:59:34.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>给定方阵，从左上角走到右下角，每次只能向右或是向下。要求经过数之积以尽可能少的<span class="math inline">\(0\)</span> 结尾，并输出方案。</p><span id="more"></span><h2 id="解答">解答</h2><p>意即经过的数尽可能少的包含 <span class="math inline">\(2\)</span>因子与 <span class="math inline">\(5\)</span>因子。因为答案由他们中的较小值所确定。 只关心 <spanclass="math inline">\(2\)</span> 与 <spanclass="math inline">\(5\)</span> 因子的次数，那么问题转换为经典的递推<span class="math inline">\(dp_{i, j} = \min\{dp_{i - 1, j}, dp_{i, j -1}\}\)</span>。</p><p>因为转移方式单调，要输出路径也只需要反推回去。</p><p>有一个小坑点，题目说 <b>non-negative</b> 而不是<b>positive</b>，如果出现 <span class="math inline">\(0\)</span> 并且 dp不出一条答案为 <span class="math inline">\(0\)</span>的方案时，直接走答案为 <span class="math inline">\(1\)</span> 经过 <spanclass="math inline">\(0\)</span> 的这条路径就好。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector <span class="title">dp</span><span class="params">(n, vector(n, vector &lt; <span class="type">int</span> &gt; (<span class="number">2</span>)))</span></span>;</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>, x; j &lt; n; ++j) &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">                pos = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span>[d, t]: &#123; pair &#123; <span class="number">2</span>, <span class="number">0</span> &#125;, &#123; <span class="number">5</span>, <span class="number">1</span> &#125; &#125;) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (x % d == <span class="number">0</span>) &#123;</span><br><span class="line">                        x /= d;</span><br><span class="line">                        dp[i][j][t] += <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j: &#123; <span class="number">0</span>, <span class="number">1</span> &#125;) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>][j] += dp[i - <span class="number">1</span>][<span class="number">0</span>][j];</span><br><span class="line">            dp[<span class="number">0</span>][i][j] += dp[<span class="number">0</span>][i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k: &#123; <span class="number">0</span>, <span class="number">1</span> &#125;) &#123;</span><br><span class="line">                dp[i][j][k] += <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j][k], dp[i][j - <span class="number">1</span>][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> x = <span class="built_in">min</span>(<span class="number">0</span>, <span class="number">1</span>, [ &amp; ](<span class="keyword">auto</span> x, <span class="keyword">auto</span> y) &#123;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>().<span class="built_in">back</span>()[x] &lt; dp.<span class="built_in">back</span>().<span class="built_in">back</span>()[y];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (~pos &amp;&amp; dp.<span class="built_in">back</span>().<span class="built_in">back</span>()[x] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; string &#123; <span class="string">&quot;1\n&quot;</span> &#125;</span><br><span class="line">            .<span class="built_in">append</span>(pos, <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">            .<span class="built_in">append</span>(n - <span class="number">1</span>, <span class="string">&#x27;R&#x27;</span>)</span><br><span class="line">            .<span class="built_in">append</span>(n - pos - <span class="number">1</span>, <span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="type">int</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> r = n - <span class="number">1</span>, c = r;</span><br><span class="line">    string ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (r &amp;&amp; c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[r - <span class="number">1</span>][c][x] &lt; dp[r][c - <span class="number">1</span>][x]) &#123;</span><br><span class="line">            r -= <span class="number">1</span>, ans += <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c -= <span class="number">1</span>, ans += <span class="string">&#x27;R&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!r) &#123;</span><br><span class="line">            ans += <span class="built_in">string</span>(c, <span class="string">&#x27;R&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!c) &#123;</span><br><span class="line">            ans += <span class="built_in">string</span>(r, <span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; dp.<span class="built_in">back</span>().<span class="built_in">back</span>()[x] &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="built_in">string</span>(ans.<span class="built_in">rbegin</span>(), ans.<span class="built_in">rend</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给定方阵，从左上角走到右下角，每次只能向右或是向下。要求经过数之积以尽可能少的
&lt;span class=&quot;math inline&quot;&gt;\(0\)&lt;/span&gt; 结尾，并输出方案。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="2" scheme="https://tau.gay/cf/2/"/>
    
    
    <category term="dp" scheme="https://tau.gay/tags/dp/"/>
    
    <category term="记录路径" scheme="https://tau.gay/tags/%E8%AE%B0%E5%BD%95%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>CF2C</title>
    <link href="https://tau.gay/cf/2/c/"/>
    <id>https://tau.gay/cf/2/c/</id>
    <published>2022-08-11T08:39:20.000Z</published>
    <updated>2022-08-23T10:37:19.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>给出三个相外离的圆，求出一个点使得到这三个圆的（分别两条）切线张角相同。或静默以报告无解。</p><span id="more"></span><figure><img src="/img/2C.png"><figcaption align="center">样例一</figcaption></figure><h3 id="背景">背景</h3><blockquote><p>如果仅有两个圆，那么该点的运动轨迹也是一个圆。熟悉解析几何的同学不难发现，此即阿氏圆。</p></blockquote><p>证明是显然的，取半张角，连结切点圆心，于是得到两个相似三角形，这同时也意味着欲求动点 <spanclass="math inline">\(X\)</span> 到两圆心（定点）的距离比为定值（当然，当该比值不为 <spanclass="math inline">\(1\)</span>，否则由反演的性质将退化为一条直线）。而这正是阿圆的定义。</p><h2 id="解答">解答</h2><p>本题有模拟退火的解法，在此略去。</p><p>设三点圆心分别为 <span class="math inline">\(A, B, C\)</span>。按照上面的背景，根据比值是否为 <span class="math inline">\(1\)</span>可以进行分类讨论：</p><ul><li>三个圆的半径相同（样例的情形）。 若 <span class="math inline">\(AB,AC\)</span> 的中垂线没有交（即平行），则无解。 否则这是唯一解。</li></ul><p>判断平行：叉积是否为 <span class="math inline">\(0\)</span>。</p><p>求两直线中垂线交点：设 <span class="math inline">\(AB, AC\)</span>中点分别为 <span class="math inline">\(M, N,\)</span> 两垂直向量为 <spanclass="math inline">\(\vec{u}, \vec{v},\)</span> 那么交点为</p><p><span class="math display">\[M + \dfrac{\vec{v} \times \vec{OM} +\vec{ON} \times \vec{v}}{\vec{u} \times \vec{v}} \cdot\vec{u}\]</span></p><ul><li>半径两两不同。</li></ul><p>按照比例求出两个阿圆，即： 对于 <span class="math inline">\(A,B\)</span> 两圆，有两点与两圆心连线交于：</p><p><span class="math display">\[P = \vec{OA} + \vec{AB} \times\dfrac{rA}{rA + rB}, Q = \vec{OA} + \vec{AB} \times \dfrac{rB}{rA -rB}\]</span></p><p>圆心 <span class="math inline">\(M\)</span> 为 <spanclass="math inline">\(P, Q\)</span> 中点，半径为 <spanclass="math inline">\(P, Q\)</span> 距离的一半。<spanclass="math inline">\(A, C\)</span> 同理。</p><p>两圆有交（<span class="math inline">\(|R - r| &lt; d &lt; R +r\)</span>），离 <span class="math inline">\(A\)</span>更近的那个即为所求。 否则无解。</p><ul><li>其中两个圆半径相同。</li></ul><p>不妨令 <span class="math inline">\(\odot A\)</span> 与 <spanclass="math inline">\(\odot B\)</span> 半径相同。 求出 <spanclass="math inline">\(AB\)</span> 中垂线，根据比例做出 <spanclass="math inline">\(\odot A, \odot C\)</span>的阿圆之后和另一个圆判交。 做法和上面类似。</p><details><summary>展开参考代码</summary><p>注：笔者的代码风格中有以下简单规则。</p><ol type="1"><li>单字母 <span class="math inline">\(\verb|point|\)</span>表示点（或者用希腊字母，如下文的 <spanclass="math inline">\(\tau\)</span>），而多字母表示向量。</li><li><span class="math inline">\(\verb|l-|\)</span> 表示长度，<spanclass="math inline">\(\verb|-v|\)</span> 表示法向量(vertical)。</li><li>「圆」是点（向量）的子类，详细请见代码。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> db = <span class="type">double</span>;</span><br><span class="line"><span class="type">const</span> db epsilon = <span class="number">1e-6</span>;</span><br><span class="line"><span class="type">const</span> db pi = numbers::pi_v&lt;db&gt;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sign</span><span class="params">(db x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; epsilon ? <span class="number">1</span> : x &lt; -epsilon ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(db x, db y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sign</span>(x - y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">inmid</span><span class="params">(db x, db l, db r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sign</span>(r - x) * <span class="built_in">sign</span>(l - x) &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span> &#123;</span><br><span class="line">    db x, y;</span><br><span class="line">    <span class="built_in">point</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">point</span>(db x, db y): <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line">    point <span class="keyword">operator</span> + (<span class="type">const</span> point &amp; k) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; x + k.x, y + k.y &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span> - (<span class="type">const</span> point &amp; k) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; x - k.x, y - k.y &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span> * (db k) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; k * x, k * y &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span> / (db k) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; k / x, k / y &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> point &amp; k) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="built_in">cmp</span>(x, k.x) &amp;&amp; !<span class="built_in">cmp</span>(y, k.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> point &amp; k) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="type">int</span> X = <span class="built_in">cmp</span>(x, k.x);</span><br><span class="line">        <span class="keyword">if</span> (X == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (X == +<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !~<span class="built_in">cmp</span>(y, k.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// counterclockwise</span></span><br><span class="line">    <span class="function">point <span class="title">turn</span><span class="params">(db k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            x * <span class="built_in">cos</span>(k) - y * <span class="built_in">cos</span>(k),</span><br><span class="line">            x * <span class="built_in">sin</span>(k) + y * <span class="built_in">cos</span>(k)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">db <span class="title">abs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hypot</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">db <span class="title">abs2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * x + y * y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">db <span class="title">dis</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (( * <span class="keyword">this</span>) - k).<span class="built_in">abs</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">point <span class="title">unit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        db w = <span class="keyword">this</span> -&gt; <span class="built_in">abs</span>();</span><br><span class="line">        <span class="keyword">return</span> &#123; x / w, y / w &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">in</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp; x, &amp; y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.11lf %.11lf&quot;</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">inmid</span><span class="params">(point x, point l, point r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">inmid</span>(x.x, l.x, r.x) &amp;&amp; <span class="built_in">inmid</span>(x.y, l.y, r.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">db <span class="title">cross</span><span class="params">(point a, point b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">db <span class="title">dot</span><span class="params">(point a, point b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">db <span class="title">rad</span><span class="params">(point a, point b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">atan2</span>(<span class="built_in">cross</span>(a, b), <span class="built_in">dot</span>(a, b));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">circle</span>: point &#123;</span><br><span class="line">    db r;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">in</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        point:: <span class="built_in">in</span> ();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp; r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        point::<span class="built_in">out</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %.11f\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">inside</span><span class="params">(point k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cmp</span>(r, point::<span class="built_in">dis</span>(k));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    circle A, B, C;</span><br><span class="line">    A.<span class="built_in">in</span>(), B.<span class="built_in">in</span>(), C.<span class="built_in">in</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">cmp</span>(A.r, B.r) &amp;&amp; !<span class="built_in">cmp</span>(A.r, C.r)) &#123;</span><br><span class="line">        point AB = B - A, AC = C - A;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">sign</span>(<span class="built_in">cross</span>(AB, AC))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        point vAB &#123; -AB.y, AB.x &#125;, vAC &#123; -AC.y, AC.x &#125;;</span><br><span class="line">        point M = A + AB * <span class="number">.5</span>, N = A + AC * <span class="number">.5</span>;</span><br><span class="line">        db k = (<span class="built_in">cross</span>(vAC, M) + <span class="built_in">cross</span>(N, vAC)) / <span class="built_in">cross</span>(vAB, vAC);</span><br><span class="line">        (M + vAB * k).<span class="built_in">out</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">cmp</span>(A.r, B.r) || !<span class="built_in">cmp</span>(A.r, C.r) || !<span class="built_in">cmp</span>(B.r, C.r)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">cmp</span>(A.r, C.r)) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(B, C);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">cmp</span>(B.r, C.r)) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(A, C);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        point AB &#123; B - A &#125;, vAB &#123; -AB.y, AB.x &#125;;</span><br><span class="line">        point AC &#123; C - A &#125;, vAC &#123; -AC.y, AC.x &#125;;</span><br><span class="line">        point M = A + AB * <span class="number">.5</span>;</span><br><span class="line"></span><br><span class="line">        point P = A + AC * (A.r / (A.r + C.r));</span><br><span class="line">        point Q = C + AC * (C.r / (A.r - C.r));</span><br><span class="line"></span><br><span class="line">        circle N &#123; (P + Q) * <span class="number">.5</span>, P.<span class="built_in">dis</span>(Q) * <span class="number">.5</span> &#125;;</span><br><span class="line">        point MN = N - M;</span><br><span class="line"></span><br><span class="line">        db lMN = MN.<span class="built_in">abs</span>(), lvAB = vAB.<span class="built_in">abs</span>();</span><br><span class="line"></span><br><span class="line">        db d = <span class="built_in">dot</span>(vAB, MN) / lvAB;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cmp</span>(<span class="built_in">point</span>(d, N.r).<span class="built_in">abs2</span>(), lMN * lMN) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> d0 = <span class="built_in">sqrt</span>(<span class="built_in">abs</span>(lMN * lMN - d * d));</span><br><span class="line">        <span class="type">double</span> d1 = d - <span class="built_in">sqrt</span>(<span class="built_in">abs</span>(N.r * N.r - d0 * d0));</span><br><span class="line">        <span class="type">double</span> d2 = d + <span class="built_in">sqrt</span>(<span class="built_in">abs</span>(N.r * N.r - d0 * d0));</span><br><span class="line"></span><br><span class="line">        point tau1 &#123; M + vAB.<span class="built_in">unit</span>() * d1 &#125;;</span><br><span class="line">        point tau2 &#123; M + vAB.<span class="built_in">unit</span>() * d2 &#125;;</span><br><span class="line"></span><br><span class="line">        (<span class="built_in">cmp</span>(A.<span class="built_in">dis</span>(tau1), A.<span class="built_in">dis</span>(tau2)) &lt; <span class="number">0</span> ? tau1 : tau2).<span class="built_in">out</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        point AB = B - A, AC = C - A;</span><br><span class="line">        circle M, N;</span><br><span class="line">        &#123;</span><br><span class="line">            point P = A + AB * (A.r / (A.r + B.r));</span><br><span class="line">            point Q = B + AB * (B.r / (A.r - B.r));</span><br><span class="line">            M = &#123; (P + Q) * <span class="number">.5</span>, P.<span class="built_in">dis</span>(Q) * <span class="number">.5</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            point P = A + AC * (A.r / (A.r + C.r));</span><br><span class="line">            point Q = C + AC * (C.r / (A.r - C.r));</span><br><span class="line">            N = &#123; (P + Q) * <span class="number">.5</span>, P.<span class="built_in">dis</span>(Q) * <span class="number">.5</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        db d = M.<span class="built_in">dis</span>(N);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cmp</span>(<span class="built_in">abs</span>(M.r - N.r), d) &gt;= <span class="number">0</span> || <span class="built_in">cmp</span>(<span class="built_in">abs</span>(M.r + N.r), d) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        db theta = <span class="built_in">acos</span>((d * d + M.r * M.r - N.r * N.r) / (d * M.r * <span class="number">2</span>));</span><br><span class="line">        db x = M.r * <span class="built_in">cos</span>(theta), y = M.r * <span class="built_in">sin</span>(theta);</span><br><span class="line"></span><br><span class="line">        point MN = N - M, vMN &#123; -MN.y, MN.x &#125;;</span><br><span class="line">        point S = M + MN.<span class="built_in">unit</span>() * x;</span><br><span class="line"></span><br><span class="line">        point tau1 &#123; S + vMN.<span class="built_in">unit</span>() * y &#125;;</span><br><span class="line">        point tau2 &#123; S - vMN.<span class="built_in">unit</span>() * y &#125;;</span><br><span class="line"></span><br><span class="line">        (<span class="built_in">cmp</span>(A.<span class="built_in">dis</span>(tau1), A.<span class="built_in">dis</span>(tau2)) &lt; <span class="number">0</span> ? tau1 : tau2).<span class="built_in">out</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;给出三个相外离的圆，求出一个点使得到这三个圆的（分别两条）切线张角相同。
或静默以报告无解。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="2" scheme="https://tau.gay/cf/2/"/>
    
    
    <category term="计算几何" scheme="https://tau.gay/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
    <category term="阿圆" scheme="https://tau.gay/tags/%E9%98%BF%E5%9C%86/"/>
    
  </entry>
  
  <entry>
    <title>CF3A</title>
    <link href="https://tau.gay/cf/3/a/"/>
    <id>https://tau.gay/cf/3/a/</id>
    <published>2022-08-11T08:39:20.000Z</published>
    <updated>2022-08-21T17:59:34.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>国际象棋中的「王」每次可以向八联通的格子移动一格，问到达给定点的最短移动次数，并输出对应路径。</p><span id="more"></span><h2 id="解答">解答</h2><p>直觉上尽可能走斜线会更近一些，这个直觉是正确的。</p><p>最少移动次数实际上为「切比雪夫距离」<spanclass="math inline">\(\max\{|x_1 - x_2|, |y_1 - y_2|\}\)</span>。</p><details><summary>展开参考代码</summary><p>一个简单的技巧是，把坐标两维分开考虑。可有效避免嵌套层数过多。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> &#123; <span class="type">char</span> x, y; &#125; a, b;</span><br><span class="line">    cin &gt;&gt; a.x &gt;&gt; a.y &gt;&gt; b.x &gt;&gt; b.y;</span><br><span class="line">    <span class="type">int</span> step = <span class="built_in">max</span>(<span class="built_in">abs</span>(a.x - b.x), <span class="built_in">abs</span>(a.y - b.y));</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; step &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; step; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.x &lt; b.x) &#123; a.x += <span class="number">1</span>; cout &lt;&lt; <span class="string">&quot;R&quot;</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (a.x &gt; b.x) &#123; a.x -= <span class="number">1</span>; cout &lt;&lt; <span class="string">&quot;L&quot;</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (a.y &lt; b.y) &#123; a.y += <span class="number">1</span>; cout &lt;&lt; <span class="string">&quot;U&quot;</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (a.y &gt; b.y) &#123; a.y -= <span class="number">1</span>; cout &lt;&lt; <span class="string">&quot;D&quot;</span>; &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;国际象棋中的「王」每次可以向八联通的格子移动一格，问到达给定点的最短移动次数，并输出对应路径。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="3" scheme="https://tau.gay/cf/3/"/>
    
    
    <category term="切比雪夫距离" scheme="https://tau.gay/tags/%E5%88%87%E6%AF%94%E9%9B%AA%E5%A4%AB%E8%B7%9D%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>CF3B</title>
    <link href="https://tau.gay/cf/3/b/"/>
    <id>https://tau.gay/cf/3/b/</id>
    <published>2022-08-11T08:39:20.000Z</published>
    <updated>2022-08-21T17:59:34.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p><span class="math inline">\(01\)</span> 背包，但容量 <spanclass="math inline">\(10 ^ 9\)</span>，但物品体积 <spanclass="math inline">\(\in [1, 2]\)</span>。</p><span id="more"></span><h2 id="解答">解答</h2><p>按照体积分为两类，不管是哪一类，在体积相同时一定是优先选取价值更大的物品。因而先对两类分别排序。</p><p>此处若感到难以为继，不妨返璞归真，枚举两者各自选取了多少。对于其中一类，处理出前缀和来，这样就可以很好的与枚举相匹配。于是瓶颈为排序，注意到物品价值 <span class="math inline">\(p_i \le 10 ^4\)</span>，也许你可以尝试「基数排序」，不过 <spanclass="math inline">\(\verb|std::sort|\)</span> 已经足够快。</p><details><summary>展开参考代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, v;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector <span class="title">g</span><span class="params">(<span class="number">2</span>, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&#123;&#125;)</span></span>;</span><br><span class="line">    g[<span class="number">0</span>].<span class="built_in">reserve</span>(n);</span><br><span class="line">    g[<span class="number">1</span>].<span class="built_in">reserve</span>(n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, cost, gain; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; cost &gt;&gt; gain;</span><br><span class="line">        g[cost - <span class="number">1</span>].<span class="built_in">emplace_back</span>(gain, i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> o = g[<span class="number">0</span>].<span class="built_in">size</span>(), t = g[<span class="number">1</span>].<span class="built_in">size</span>();</span><br><span class="line">    ranges::<span class="built_in">sort</span>(g[<span class="number">0</span>] | views::reverse);</span><br><span class="line">    ranges::<span class="built_in">sort</span>(g[<span class="number">1</span>] | views::reverse);</span><br><span class="line"></span><br><span class="line">    vector &lt;ll&gt; <span class="built_in">prefix</span>(t + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t; ++i) &#123;</span><br><span class="line">        prefix[i + <span class="number">1</span>] = prefix[i] + g[<span class="number">1</span>][i].first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll ans &#123;&#125;, sum &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> s &#123; <span class="number">-1</span> &#125;, e &#123; <span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">min</span>(v, o); ++i) &#123;</span><br><span class="line">        sum += !i ? <span class="number">0</span> : g[<span class="number">0</span>][i - <span class="number">1</span>].first;</span><br><span class="line">        <span class="type">int</span> T = <span class="built_in">min</span>(t, (v - i) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (sum + prefix[T] &gt; ans) &#123;</span><br><span class="line">            ans = sum + prefix[T];</span><br><span class="line">            <span class="built_in">tie</span>(s, e) = tuple &#123; i, T &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>[j, take]: &#123; pair&#123;<span class="number">0</span>, s&#125;, &#123;<span class="number">1</span>, e&#125; &#125;) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; take; ++i) &#123;</span><br><span class="line">            cout &lt;&lt; g[j][i].second &lt;&lt; <span class="string">&quot; \n&quot;</span> [i + <span class="number">1</span> == take];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(01\)&lt;/span&gt; 背包，但容量 &lt;span
class=&quot;math inline&quot;&gt;\(10 ^ 9\)&lt;/span&gt;，但物品体积 &lt;span
class=&quot;math inline&quot;&gt;\(\in [1, 2]\)&lt;/span&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="https://tau.gay/acm/"/>
    
    <category term="cf" scheme="https://tau.gay/cf/"/>
    
    <category term="3" scheme="https://tau.gay/cf/3/"/>
    
    
    <category term="贪心" scheme="https://tau.gay/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="背包" scheme="https://tau.gay/tags/%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
</feed>
